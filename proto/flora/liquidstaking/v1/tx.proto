syntax = "proto3";
package flora.liquidstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

option go_package = "github.com/rollchains/flora/x/liquidstaking/types";

// Msg defines the liquid staking Msg service
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // TokenizeShares converts delegation shares into liquid staking tokens
  rpc TokenizeShares(MsgTokenizeShares) returns (MsgTokenizeSharesResponse);
  
  // RedeemTokens converts liquid staking tokens back to delegation shares
  rpc RedeemTokens(MsgRedeemTokens) returns (MsgRedeemTokensResponse);
}

// MsgTokenizeShares defines a message for converting delegation shares into liquid staking tokens
message MsgTokenizeShares {
  option (cosmos.msg.v1.signer) = "delegator_address";
  option (amino.name) = "liquidstaking/MsgTokenizeShares";
  
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  
  // delegator_address is the address of the delegator
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // validator_address is the address of the validator
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // shares is the amount of delegation shares to tokenize
  cosmos.base.v1beta1.Coin shares = 3 [(gogoproto.nullable) = false];
  
  // owner_address is the address that will receive the liquid staking tokens
  // if empty, defaults to delegator_address
  string owner_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgTokenizeSharesResponse defines the response for MsgTokenizeShares
message MsgTokenizeSharesResponse {
  // denom is the denom of the newly minted liquid staking token
  string denom = 1;
  
  // amount is the amount of liquid staking tokens minted
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
  
  // record_id is the ID of the tokenization record created
  uint64 record_id = 3;
}

// MsgRedeemTokens defines a message for redeeming liquid staking tokens back to native staking
message MsgRedeemTokens {
  option (cosmos.msg.v1.signer) = "owner_address";
  option (amino.name) = "liquidstaking/MsgRedeemTokens";
  
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  
  // owner_address is the address that owns the liquid staking tokens
  string owner_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // amount is the amount of liquid staking tokens to redeem
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

// MsgRedeemTokensResponse defines the response for MsgRedeemTokens
message MsgRedeemTokensResponse {
  // shares is the amount of delegation shares restored
  string shares = 1 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false
  ];
  
  // record_id is the ID of the tokenization record that was updated/deleted
  uint64 record_id = 2;
}