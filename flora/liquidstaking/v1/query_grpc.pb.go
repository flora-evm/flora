// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: flora/liquidstaking/v1/query.proto

package liquidstakingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                         = "/flora.liquidstaking.v1.Query/Params"
	Query_TokenizationRecord_FullMethodName             = "/flora.liquidstaking.v1.Query/TokenizationRecord"
	Query_TokenizationRecords_FullMethodName            = "/flora.liquidstaking.v1.Query/TokenizationRecords"
	Query_TokenizationRecordsByValidator_FullMethodName = "/flora.liquidstaking.v1.Query/TokenizationRecordsByValidator"
	Query_TokenizationRecordsByOwner_FullMethodName     = "/flora.liquidstaking.v1.Query/TokenizationRecordsByOwner"
	Query_TotalLiquidStaked_FullMethodName              = "/flora.liquidstaking.v1.Query/TotalLiquidStaked"
	Query_ValidatorLiquidStaked_FullMethodName          = "/flora.liquidstaking.v1.Query/ValidatorLiquidStaked"
	Query_TokenizationRecordsByDenom_FullMethodName     = "/flora.liquidstaking.v1.Query/TokenizationRecordsByDenom"
	Query_RateLimitStatus_FullMethodName                = "/flora.liquidstaking.v1.Query/RateLimitStatus"
	Query_TokenizationStatistics_FullMethodName         = "/flora.liquidstaking.v1.Query/TokenizationStatistics"
	Query_ValidatorStatistics_FullMethodName            = "/flora.liquidstaking.v1.Query/ValidatorStatistics"
	Query_ExchangeRate_FullMethodName                   = "/flora.liquidstaking.v1.Query/ExchangeRate"
	Query_AllExchangeRates_FullMethodName               = "/flora.liquidstaking.v1.Query/AllExchangeRates"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the module parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// TokenizationRecord queries a specific tokenization record by ID
	TokenizationRecord(ctx context.Context, in *QueryTokenizationRecordRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordResponse, error)
	// TokenizationRecords queries all tokenization records
	TokenizationRecords(ctx context.Context, in *QueryTokenizationRecordsRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsResponse, error)
	// TokenizationRecordsByValidator queries tokenization records by validator
	TokenizationRecordsByValidator(ctx context.Context, in *QueryTokenizationRecordsByValidatorRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsByValidatorResponse, error)
	// TokenizationRecordsByOwner queries tokenization records by owner
	TokenizationRecordsByOwner(ctx context.Context, in *QueryTokenizationRecordsByOwnerRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsByOwnerResponse, error)
	// TotalLiquidStaked queries the total amount of liquid staked tokens
	TotalLiquidStaked(ctx context.Context, in *QueryTotalLiquidStakedRequest, opts ...grpc.CallOption) (*QueryTotalLiquidStakedResponse, error)
	// ValidatorLiquidStaked queries the amount of liquid staked tokens for a specific validator
	ValidatorLiquidStaked(ctx context.Context, in *QueryValidatorLiquidStakedRequest, opts ...grpc.CallOption) (*QueryValidatorLiquidStakedResponse, error)
	// TokenizationRecordsByDenom queries tokenization records by LST denomination
	TokenizationRecordsByDenom(ctx context.Context, in *QueryTokenizationRecordsByDenomRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsByDenomResponse, error)
	// RateLimitStatus queries the current rate limit usage for an address
	RateLimitStatus(ctx context.Context, in *QueryRateLimitStatusRequest, opts ...grpc.CallOption) (*QueryRateLimitStatusResponse, error)
	// TokenizationStatistics queries aggregated tokenization statistics
	TokenizationStatistics(ctx context.Context, in *QueryTokenizationStatisticsRequest, opts ...grpc.CallOption) (*QueryTokenizationStatisticsResponse, error)
	// ValidatorStatistics queries detailed statistics for a specific validator
	ValidatorStatistics(ctx context.Context, in *QueryValidatorStatisticsRequest, opts ...grpc.CallOption) (*QueryValidatorStatisticsResponse, error)
	// ExchangeRate returns the current exchange rate for a validator
	ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error)
	// AllExchangeRates returns all exchange rates
	AllExchangeRates(ctx context.Context, in *QueryAllExchangeRatesRequest, opts ...grpc.CallOption) (*QueryAllExchangeRatesResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizationRecord(ctx context.Context, in *QueryTokenizationRecordRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordResponse, error) {
	out := new(QueryTokenizationRecordResponse)
	err := c.cc.Invoke(ctx, Query_TokenizationRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizationRecords(ctx context.Context, in *QueryTokenizationRecordsRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsResponse, error) {
	out := new(QueryTokenizationRecordsResponse)
	err := c.cc.Invoke(ctx, Query_TokenizationRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizationRecordsByValidator(ctx context.Context, in *QueryTokenizationRecordsByValidatorRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsByValidatorResponse, error) {
	out := new(QueryTokenizationRecordsByValidatorResponse)
	err := c.cc.Invoke(ctx, Query_TokenizationRecordsByValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizationRecordsByOwner(ctx context.Context, in *QueryTokenizationRecordsByOwnerRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsByOwnerResponse, error) {
	out := new(QueryTokenizationRecordsByOwnerResponse)
	err := c.cc.Invoke(ctx, Query_TokenizationRecordsByOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalLiquidStaked(ctx context.Context, in *QueryTotalLiquidStakedRequest, opts ...grpc.CallOption) (*QueryTotalLiquidStakedResponse, error) {
	out := new(QueryTotalLiquidStakedResponse)
	err := c.cc.Invoke(ctx, Query_TotalLiquidStaked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorLiquidStaked(ctx context.Context, in *QueryValidatorLiquidStakedRequest, opts ...grpc.CallOption) (*QueryValidatorLiquidStakedResponse, error) {
	out := new(QueryValidatorLiquidStakedResponse)
	err := c.cc.Invoke(ctx, Query_ValidatorLiquidStaked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizationRecordsByDenom(ctx context.Context, in *QueryTokenizationRecordsByDenomRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsByDenomResponse, error) {
	out := new(QueryTokenizationRecordsByDenomResponse)
	err := c.cc.Invoke(ctx, Query_TokenizationRecordsByDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RateLimitStatus(ctx context.Context, in *QueryRateLimitStatusRequest, opts ...grpc.CallOption) (*QueryRateLimitStatusResponse, error) {
	out := new(QueryRateLimitStatusResponse)
	err := c.cc.Invoke(ctx, Query_RateLimitStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizationStatistics(ctx context.Context, in *QueryTokenizationStatisticsRequest, opts ...grpc.CallOption) (*QueryTokenizationStatisticsResponse, error) {
	out := new(QueryTokenizationStatisticsResponse)
	err := c.cc.Invoke(ctx, Query_TokenizationStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorStatistics(ctx context.Context, in *QueryValidatorStatisticsRequest, opts ...grpc.CallOption) (*QueryValidatorStatisticsResponse, error) {
	out := new(QueryValidatorStatisticsResponse)
	err := c.cc.Invoke(ctx, Query_ValidatorStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error) {
	out := new(QueryExchangeRateResponse)
	err := c.cc.Invoke(ctx, Query_ExchangeRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllExchangeRates(ctx context.Context, in *QueryAllExchangeRatesRequest, opts ...grpc.CallOption) (*QueryAllExchangeRatesResponse, error) {
	out := new(QueryAllExchangeRatesResponse)
	err := c.cc.Invoke(ctx, Query_AllExchangeRates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Params queries the module parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// TokenizationRecord queries a specific tokenization record by ID
	TokenizationRecord(context.Context, *QueryTokenizationRecordRequest) (*QueryTokenizationRecordResponse, error)
	// TokenizationRecords queries all tokenization records
	TokenizationRecords(context.Context, *QueryTokenizationRecordsRequest) (*QueryTokenizationRecordsResponse, error)
	// TokenizationRecordsByValidator queries tokenization records by validator
	TokenizationRecordsByValidator(context.Context, *QueryTokenizationRecordsByValidatorRequest) (*QueryTokenizationRecordsByValidatorResponse, error)
	// TokenizationRecordsByOwner queries tokenization records by owner
	TokenizationRecordsByOwner(context.Context, *QueryTokenizationRecordsByOwnerRequest) (*QueryTokenizationRecordsByOwnerResponse, error)
	// TotalLiquidStaked queries the total amount of liquid staked tokens
	TotalLiquidStaked(context.Context, *QueryTotalLiquidStakedRequest) (*QueryTotalLiquidStakedResponse, error)
	// ValidatorLiquidStaked queries the amount of liquid staked tokens for a specific validator
	ValidatorLiquidStaked(context.Context, *QueryValidatorLiquidStakedRequest) (*QueryValidatorLiquidStakedResponse, error)
	// TokenizationRecordsByDenom queries tokenization records by LST denomination
	TokenizationRecordsByDenom(context.Context, *QueryTokenizationRecordsByDenomRequest) (*QueryTokenizationRecordsByDenomResponse, error)
	// RateLimitStatus queries the current rate limit usage for an address
	RateLimitStatus(context.Context, *QueryRateLimitStatusRequest) (*QueryRateLimitStatusResponse, error)
	// TokenizationStatistics queries aggregated tokenization statistics
	TokenizationStatistics(context.Context, *QueryTokenizationStatisticsRequest) (*QueryTokenizationStatisticsResponse, error)
	// ValidatorStatistics queries detailed statistics for a specific validator
	ValidatorStatistics(context.Context, *QueryValidatorStatisticsRequest) (*QueryValidatorStatisticsResponse, error)
	// ExchangeRate returns the current exchange rate for a validator
	ExchangeRate(context.Context, *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error)
	// AllExchangeRates returns all exchange rates
	AllExchangeRates(context.Context, *QueryAllExchangeRatesRequest) (*QueryAllExchangeRatesResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) TokenizationRecord(context.Context, *QueryTokenizationRecordRequest) (*QueryTokenizationRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizationRecord not implemented")
}
func (UnimplementedQueryServer) TokenizationRecords(context.Context, *QueryTokenizationRecordsRequest) (*QueryTokenizationRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizationRecords not implemented")
}
func (UnimplementedQueryServer) TokenizationRecordsByValidator(context.Context, *QueryTokenizationRecordsByValidatorRequest) (*QueryTokenizationRecordsByValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizationRecordsByValidator not implemented")
}
func (UnimplementedQueryServer) TokenizationRecordsByOwner(context.Context, *QueryTokenizationRecordsByOwnerRequest) (*QueryTokenizationRecordsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizationRecordsByOwner not implemented")
}
func (UnimplementedQueryServer) TotalLiquidStaked(context.Context, *QueryTotalLiquidStakedRequest) (*QueryTotalLiquidStakedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalLiquidStaked not implemented")
}
func (UnimplementedQueryServer) ValidatorLiquidStaked(context.Context, *QueryValidatorLiquidStakedRequest) (*QueryValidatorLiquidStakedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorLiquidStaked not implemented")
}
func (UnimplementedQueryServer) TokenizationRecordsByDenom(context.Context, *QueryTokenizationRecordsByDenomRequest) (*QueryTokenizationRecordsByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizationRecordsByDenom not implemented")
}
func (UnimplementedQueryServer) RateLimitStatus(context.Context, *QueryRateLimitStatusRequest) (*QueryRateLimitStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateLimitStatus not implemented")
}
func (UnimplementedQueryServer) TokenizationStatistics(context.Context, *QueryTokenizationStatisticsRequest) (*QueryTokenizationStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizationStatistics not implemented")
}
func (UnimplementedQueryServer) ValidatorStatistics(context.Context, *QueryValidatorStatisticsRequest) (*QueryValidatorStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorStatistics not implemented")
}
func (UnimplementedQueryServer) ExchangeRate(context.Context, *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRate not implemented")
}
func (UnimplementedQueryServer) AllExchangeRates(context.Context, *QueryAllExchangeRatesRequest) (*QueryAllExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllExchangeRates not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizationRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenizationRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizationRecord(ctx, req.(*QueryTokenizationRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizationRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizationRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizationRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenizationRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizationRecords(ctx, req.(*QueryTokenizationRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizationRecordsByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizationRecordsByValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizationRecordsByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenizationRecordsByValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizationRecordsByValidator(ctx, req.(*QueryTokenizationRecordsByValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizationRecordsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizationRecordsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizationRecordsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenizationRecordsByOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizationRecordsByOwner(ctx, req.(*QueryTokenizationRecordsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalLiquidStaked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalLiquidStakedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalLiquidStaked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TotalLiquidStaked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalLiquidStaked(ctx, req.(*QueryTotalLiquidStakedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorLiquidStaked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorLiquidStakedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorLiquidStaked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ValidatorLiquidStaked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorLiquidStaked(ctx, req.(*QueryValidatorLiquidStakedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizationRecordsByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizationRecordsByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizationRecordsByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenizationRecordsByDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizationRecordsByDenom(ctx, req.(*QueryTokenizationRecordsByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RateLimitStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimitStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RateLimitStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RateLimitStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RateLimitStatus(ctx, req.(*QueryRateLimitStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizationStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizationStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizationStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenizationStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizationStatistics(ctx, req.(*QueryTokenizationStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ValidatorStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorStatistics(ctx, req.(*QueryValidatorStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeRate(ctx, req.(*QueryExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllExchangeRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllExchangeRates(ctx, req.(*QueryAllExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flora.liquidstaking.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TokenizationRecord",
			Handler:    _Query_TokenizationRecord_Handler,
		},
		{
			MethodName: "TokenizationRecords",
			Handler:    _Query_TokenizationRecords_Handler,
		},
		{
			MethodName: "TokenizationRecordsByValidator",
			Handler:    _Query_TokenizationRecordsByValidator_Handler,
		},
		{
			MethodName: "TokenizationRecordsByOwner",
			Handler:    _Query_TokenizationRecordsByOwner_Handler,
		},
		{
			MethodName: "TotalLiquidStaked",
			Handler:    _Query_TotalLiquidStaked_Handler,
		},
		{
			MethodName: "ValidatorLiquidStaked",
			Handler:    _Query_ValidatorLiquidStaked_Handler,
		},
		{
			MethodName: "TokenizationRecordsByDenom",
			Handler:    _Query_TokenizationRecordsByDenom_Handler,
		},
		{
			MethodName: "RateLimitStatus",
			Handler:    _Query_RateLimitStatus_Handler,
		},
		{
			MethodName: "TokenizationStatistics",
			Handler:    _Query_TokenizationStatistics_Handler,
		},
		{
			MethodName: "ValidatorStatistics",
			Handler:    _Query_ValidatorStatistics_Handler,
		},
		{
			MethodName: "ExchangeRate",
			Handler:    _Query_ExchangeRate_Handler,
		},
		{
			MethodName: "AllExchangeRates",
			Handler:    _Query_AllExchangeRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flora/liquidstaking/v1/query.proto",
}
