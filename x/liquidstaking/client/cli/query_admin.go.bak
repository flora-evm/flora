package cli

import (
	"fmt"

	"github.com/spf13/cobra"

	"github.com/cosmos/cosmos-sdk/client"
	"github.com/cosmos/cosmos-sdk/client/flags"
	sdk "github.com/cosmos/cosmos-sdk/types"

	"github.com/rollchains/flora/x/liquidstaking/types"
)

// GetQueryAdminCmds returns the cli query commands for admin functionality
func GetQueryAdminCmds() []*cobra.Command {
	return []*cobra.Command{
		CmdQueryEmergencyStatus(),
		CmdQueryValidatorWhitelist(),
		CmdQueryValidatorBlacklist(),
		CmdQueryValidatorStatus(),
	}
}

// CmdQueryEmergencyStatus returns a command to query emergency pause status
func CmdQueryEmergencyStatus() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "emergency-status",
		Short: "Query the emergency pause status of the module",
		Args:  cobra.NoArgs,
		RunE: func(cmd *cobra.Command, args []string) error {
			clientCtx, err := client.GetClientQueryContext(cmd)
			if err != nil {
				return err
			}

			queryClient := types.NewQueryClient(clientCtx)

			res, err := queryClient.EmergencyStatus(cmd.Context(), &types.QueryEmergencyStatusRequest{})
			if err != nil {
				return err
			}

			return clientCtx.PrintProto(res)
		},
	}

	flags.AddQueryFlagsToCmd(cmd)
	return cmd
}

// CmdQueryValidatorWhitelist returns a command to query the validator whitelist
func CmdQueryValidatorWhitelist() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "validator-whitelist",
		Short: "Query the validator whitelist",
		Args:  cobra.NoArgs,
		RunE: func(cmd *cobra.Command, args []string) error {
			clientCtx, err := client.GetClientQueryContext(cmd)
			if err != nil {
				return err
			}

			queryClient := types.NewQueryClient(clientCtx)

			res, err := queryClient.ValidatorWhitelist(cmd.Context(), &types.QueryValidatorWhitelistRequest{})
			if err != nil {
				return err
			}

			return clientCtx.PrintProto(res)
		},
	}

	flags.AddQueryFlagsToCmd(cmd)
	return cmd
}

// CmdQueryValidatorBlacklist returns a command to query the validator blacklist
func CmdQueryValidatorBlacklist() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "validator-blacklist",
		Short: "Query the validator blacklist",
		Args:  cobra.NoArgs,
		RunE: func(cmd *cobra.Command, args []string) error {
			clientCtx, err := client.GetClientQueryContext(cmd)
			if err != nil {
				return err
			}

			queryClient := types.NewQueryClient(clientCtx)

			res, err := queryClient.ValidatorBlacklist(cmd.Context(), &types.QueryValidatorBlacklistRequest{})
			if err != nil {
				return err
			}

			return clientCtx.PrintProto(res)
		},
	}

	flags.AddQueryFlagsToCmd(cmd)
	return cmd
}

// CmdQueryValidatorStatus returns a command to query a validator's liquid staking status
func CmdQueryValidatorStatus() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "validator-status [validator-address]",
		Short: "Query a validator's liquid staking status",
		Args:  cobra.ExactArgs(1),
		Long: `Query a validator's liquid staking status including:
- Whether the validator is allowed (whitelist/blacklist)
- Custom liquid cap (if any)
- Current liquid staked amount
- Current liquid percentage

Example:
$ florad query liquidstaking validator-status floravaloper1abc...`,
		RunE: func(cmd *cobra.Command, args []string) error {
			clientCtx, err := client.GetClientQueryContext(cmd)
			if err != nil {
				return err
			}

			validatorAddr := args[0]

			// Validate validator address
			if _, err := sdk.ValAddressFromBech32(validatorAddr); err != nil {
				return fmt.Errorf("invalid validator address: %w", err)
			}

			queryClient := types.NewQueryClient(clientCtx)

			res, err := queryClient.ValidatorStatus(cmd.Context(), &types.QueryValidatorStatusRequest{
				ValidatorAddress: validatorAddr,
			})
			if err != nil {
				return err
			}

			return clientCtx.PrintProto(res)
		},
	}

	flags.AddQueryFlagsToCmd(cmd)
	return cmd
}