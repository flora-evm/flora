// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flora/liquidstaking/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method
type QueryParamsResponse struct {
	// params defines the module parameters
	Params ModuleParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() ModuleParams {
	if m != nil {
		return m.Params
	}
	return ModuleParams{}
}

// QueryTokenizationRecordRequest is the request type for the Query/TokenizationRecord RPC method
type QueryTokenizationRecordRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryTokenizationRecordRequest) Reset()         { *m = QueryTokenizationRecordRequest{} }
func (m *QueryTokenizationRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizationRecordRequest) ProtoMessage()    {}
func (*QueryTokenizationRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{2}
}
func (m *QueryTokenizationRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizationRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizationRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizationRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizationRecordRequest.Merge(m, src)
}
func (m *QueryTokenizationRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizationRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizationRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizationRecordRequest proto.InternalMessageInfo

func (m *QueryTokenizationRecordRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryTokenizationRecordResponse is the response type for the Query/TokenizationRecord RPC method
type QueryTokenizationRecordResponse struct {
	Record TokenizationRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record"`
}

func (m *QueryTokenizationRecordResponse) Reset()         { *m = QueryTokenizationRecordResponse{} }
func (m *QueryTokenizationRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizationRecordResponse) ProtoMessage()    {}
func (*QueryTokenizationRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{3}
}
func (m *QueryTokenizationRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizationRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizationRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizationRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizationRecordResponse.Merge(m, src)
}
func (m *QueryTokenizationRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizationRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizationRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizationRecordResponse proto.InternalMessageInfo

func (m *QueryTokenizationRecordResponse) GetRecord() TokenizationRecord {
	if m != nil {
		return m.Record
	}
	return TokenizationRecord{}
}

// QueryTokenizationRecordsRequest is the request type for the Query/TokenizationRecords RPC method
type QueryTokenizationRecordsRequest struct {
	// pagination defines an optional pagination for the request
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokenizationRecordsRequest) Reset()         { *m = QueryTokenizationRecordsRequest{} }
func (m *QueryTokenizationRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizationRecordsRequest) ProtoMessage()    {}
func (*QueryTokenizationRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{4}
}
func (m *QueryTokenizationRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizationRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizationRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizationRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizationRecordsRequest.Merge(m, src)
}
func (m *QueryTokenizationRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizationRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizationRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizationRecordsRequest proto.InternalMessageInfo

func (m *QueryTokenizationRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokenizationRecordsResponse is the response type for the Query/TokenizationRecords RPC method
type QueryTokenizationRecordsResponse struct {
	Records []TokenizationRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
	// pagination defines the pagination in the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokenizationRecordsResponse) Reset()         { *m = QueryTokenizationRecordsResponse{} }
func (m *QueryTokenizationRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizationRecordsResponse) ProtoMessage()    {}
func (*QueryTokenizationRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{5}
}
func (m *QueryTokenizationRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizationRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizationRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizationRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizationRecordsResponse.Merge(m, src)
}
func (m *QueryTokenizationRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizationRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizationRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizationRecordsResponse proto.InternalMessageInfo

func (m *QueryTokenizationRecordsResponse) GetRecords() []TokenizationRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryTokenizationRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokenizationRecordsByValidatorRequest is the request type for the Query/TokenizationRecordsByValidator RPC method
type QueryTokenizationRecordsByValidatorRequest struct {
	// validator_address is the address of the validator
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// pagination defines an optional pagination for the request
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokenizationRecordsByValidatorRequest) Reset() {
	*m = QueryTokenizationRecordsByValidatorRequest{}
}
func (m *QueryTokenizationRecordsByValidatorRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTokenizationRecordsByValidatorRequest) ProtoMessage() {}
func (*QueryTokenizationRecordsByValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{6}
}
func (m *QueryTokenizationRecordsByValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizationRecordsByValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizationRecordsByValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizationRecordsByValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizationRecordsByValidatorRequest.Merge(m, src)
}
func (m *QueryTokenizationRecordsByValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizationRecordsByValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizationRecordsByValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizationRecordsByValidatorRequest proto.InternalMessageInfo

func (m *QueryTokenizationRecordsByValidatorRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *QueryTokenizationRecordsByValidatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokenizationRecordsByValidatorResponse is the response type for the Query/TokenizationRecordsByValidator RPC method
type QueryTokenizationRecordsByValidatorResponse struct {
	Records []TokenizationRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
	// pagination defines the pagination in the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokenizationRecordsByValidatorResponse) Reset() {
	*m = QueryTokenizationRecordsByValidatorResponse{}
}
func (m *QueryTokenizationRecordsByValidatorResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTokenizationRecordsByValidatorResponse) ProtoMessage() {}
func (*QueryTokenizationRecordsByValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{7}
}
func (m *QueryTokenizationRecordsByValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizationRecordsByValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizationRecordsByValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizationRecordsByValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizationRecordsByValidatorResponse.Merge(m, src)
}
func (m *QueryTokenizationRecordsByValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizationRecordsByValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizationRecordsByValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizationRecordsByValidatorResponse proto.InternalMessageInfo

func (m *QueryTokenizationRecordsByValidatorResponse) GetRecords() []TokenizationRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryTokenizationRecordsByValidatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokenizationRecordsByOwnerRequest is the request type for the Query/TokenizationRecordsByOwner RPC method
type QueryTokenizationRecordsByOwnerRequest struct {
	// owner_address is the address of the owner
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// pagination defines an optional pagination for the request
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokenizationRecordsByOwnerRequest) Reset() {
	*m = QueryTokenizationRecordsByOwnerRequest{}
}
func (m *QueryTokenizationRecordsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizationRecordsByOwnerRequest) ProtoMessage()    {}
func (*QueryTokenizationRecordsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{8}
}
func (m *QueryTokenizationRecordsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizationRecordsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizationRecordsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizationRecordsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizationRecordsByOwnerRequest.Merge(m, src)
}
func (m *QueryTokenizationRecordsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizationRecordsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizationRecordsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizationRecordsByOwnerRequest proto.InternalMessageInfo

func (m *QueryTokenizationRecordsByOwnerRequest) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *QueryTokenizationRecordsByOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokenizationRecordsByOwnerResponse is the response type for the Query/TokenizationRecordsByOwner RPC method
type QueryTokenizationRecordsByOwnerResponse struct {
	Records []TokenizationRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
	// pagination defines the pagination in the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokenizationRecordsByOwnerResponse) Reset() {
	*m = QueryTokenizationRecordsByOwnerResponse{}
}
func (m *QueryTokenizationRecordsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizationRecordsByOwnerResponse) ProtoMessage()    {}
func (*QueryTokenizationRecordsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{9}
}
func (m *QueryTokenizationRecordsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizationRecordsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizationRecordsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizationRecordsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizationRecordsByOwnerResponse.Merge(m, src)
}
func (m *QueryTokenizationRecordsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizationRecordsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizationRecordsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizationRecordsByOwnerResponse proto.InternalMessageInfo

func (m *QueryTokenizationRecordsByOwnerResponse) GetRecords() []TokenizationRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryTokenizationRecordsByOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTotalLiquidStakedRequest is the request type for the Query/TotalLiquidStaked RPC method
type QueryTotalLiquidStakedRequest struct {
}

func (m *QueryTotalLiquidStakedRequest) Reset()         { *m = QueryTotalLiquidStakedRequest{} }
func (m *QueryTotalLiquidStakedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLiquidStakedRequest) ProtoMessage()    {}
func (*QueryTotalLiquidStakedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{10}
}
func (m *QueryTotalLiquidStakedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLiquidStakedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLiquidStakedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLiquidStakedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLiquidStakedRequest.Merge(m, src)
}
func (m *QueryTotalLiquidStakedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLiquidStakedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLiquidStakedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLiquidStakedRequest proto.InternalMessageInfo

// QueryTotalLiquidStakedResponse is the response type for the Query/TotalLiquidStaked RPC method
type QueryTotalLiquidStakedResponse struct {
	// total_liquid_staked is the total amount of liquid staked tokens
	TotalLiquidStaked cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_liquid_staked,json=totalLiquidStaked,proto3,customtype=cosmossdk.io/math.Int" json:"total_liquid_staked"`
}

func (m *QueryTotalLiquidStakedResponse) Reset()         { *m = QueryTotalLiquidStakedResponse{} }
func (m *QueryTotalLiquidStakedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLiquidStakedResponse) ProtoMessage()    {}
func (*QueryTotalLiquidStakedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{11}
}
func (m *QueryTotalLiquidStakedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLiquidStakedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLiquidStakedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLiquidStakedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLiquidStakedResponse.Merge(m, src)
}
func (m *QueryTotalLiquidStakedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLiquidStakedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLiquidStakedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLiquidStakedResponse proto.InternalMessageInfo

// QueryValidatorLiquidStakedRequest is the request type for the Query/ValidatorLiquidStaked RPC method
type QueryValidatorLiquidStakedRequest struct {
	// validator_address is the address of the validator
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryValidatorLiquidStakedRequest) Reset()         { *m = QueryValidatorLiquidStakedRequest{} }
func (m *QueryValidatorLiquidStakedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorLiquidStakedRequest) ProtoMessage()    {}
func (*QueryValidatorLiquidStakedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{12}
}
func (m *QueryValidatorLiquidStakedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorLiquidStakedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorLiquidStakedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorLiquidStakedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorLiquidStakedRequest.Merge(m, src)
}
func (m *QueryValidatorLiquidStakedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorLiquidStakedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorLiquidStakedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorLiquidStakedRequest proto.InternalMessageInfo

func (m *QueryValidatorLiquidStakedRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// QueryValidatorLiquidStakedResponse is the response type for the Query/ValidatorLiquidStaked RPC method
type QueryValidatorLiquidStakedResponse struct {
	// liquid_staked is the amount of liquid staked tokens for the validator
	LiquidStaked cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=liquid_staked,json=liquidStaked,proto3,customtype=cosmossdk.io/math.Int" json:"liquid_staked"`
}

func (m *QueryValidatorLiquidStakedResponse) Reset()         { *m = QueryValidatorLiquidStakedResponse{} }
func (m *QueryValidatorLiquidStakedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorLiquidStakedResponse) ProtoMessage()    {}
func (*QueryValidatorLiquidStakedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{13}
}
func (m *QueryValidatorLiquidStakedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorLiquidStakedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorLiquidStakedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorLiquidStakedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorLiquidStakedResponse.Merge(m, src)
}
func (m *QueryValidatorLiquidStakedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorLiquidStakedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorLiquidStakedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorLiquidStakedResponse proto.InternalMessageInfo

// QueryTokenizationRecordsByDenomRequest is the request type for the Query/TokenizationRecordsByDenom RPC method
type QueryTokenizationRecordsByDenomRequest struct {
	// denom is the LST denomination to query for
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// pagination defines an optional pagination for the request
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokenizationRecordsByDenomRequest) Reset() {
	*m = QueryTokenizationRecordsByDenomRequest{}
}
func (m *QueryTokenizationRecordsByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizationRecordsByDenomRequest) ProtoMessage()    {}
func (*QueryTokenizationRecordsByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{14}
}
func (m *QueryTokenizationRecordsByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizationRecordsByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizationRecordsByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizationRecordsByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizationRecordsByDenomRequest.Merge(m, src)
}
func (m *QueryTokenizationRecordsByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizationRecordsByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizationRecordsByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizationRecordsByDenomRequest proto.InternalMessageInfo

func (m *QueryTokenizationRecordsByDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryTokenizationRecordsByDenomRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokenizationRecordsByDenomResponse is the response type for the Query/TokenizationRecordsByDenom RPC method
type QueryTokenizationRecordsByDenomResponse struct {
	Records []TokenizationRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
	// pagination defines the pagination in the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokenizationRecordsByDenomResponse) Reset() {
	*m = QueryTokenizationRecordsByDenomResponse{}
}
func (m *QueryTokenizationRecordsByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizationRecordsByDenomResponse) ProtoMessage()    {}
func (*QueryTokenizationRecordsByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{15}
}
func (m *QueryTokenizationRecordsByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizationRecordsByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizationRecordsByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizationRecordsByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizationRecordsByDenomResponse.Merge(m, src)
}
func (m *QueryTokenizationRecordsByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizationRecordsByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizationRecordsByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizationRecordsByDenomResponse proto.InternalMessageInfo

func (m *QueryTokenizationRecordsByDenomResponse) GetRecords() []TokenizationRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryTokenizationRecordsByDenomResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRateLimitStatusRequest is the request type for the Query/RateLimitStatus RPC method
type QueryRateLimitStatusRequest struct {
	// address can be a global identifier, validator address, or user address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryRateLimitStatusRequest) Reset()         { *m = QueryRateLimitStatusRequest{} }
func (m *QueryRateLimitStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimitStatusRequest) ProtoMessage()    {}
func (*QueryRateLimitStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{16}
}
func (m *QueryRateLimitStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimitStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimitStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimitStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimitStatusRequest.Merge(m, src)
}
func (m *QueryRateLimitStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimitStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimitStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimitStatusRequest proto.InternalMessageInfo

func (m *QueryRateLimitStatusRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// RateLimitInfo contains rate limit usage information
type RateLimitInfo struct {
	// limit_type identifies the type of limit (global, validator, user)
	LimitType string `protobuf:"bytes,1,opt,name=limit_type,json=limitType,proto3" json:"limit_type,omitempty"`
	// current_amount is the amount used in the current window
	CurrentAmount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=current_amount,json=currentAmount,proto3,customtype=cosmossdk.io/math.Int" json:"current_amount"`
	// max_amount is the maximum allowed in the window
	MaxAmount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=max_amount,json=maxAmount,proto3,customtype=cosmossdk.io/math.Int" json:"max_amount"`
	// current_count is the number of operations in the current window
	CurrentCount uint64 `protobuf:"varint,4,opt,name=current_count,json=currentCount,proto3" json:"current_count,omitempty"`
	// max_count is the maximum operations allowed in the window
	MaxCount uint64 `protobuf:"varint,5,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// window_start is when the current window started
	WindowStart time.Time `protobuf:"bytes,6,opt,name=window_start,json=windowStart,proto3,stdtime" json:"window_start"`
	// window_end is when the current window ends
	WindowEnd time.Time `protobuf:"bytes,7,opt,name=window_end,json=windowEnd,proto3,stdtime" json:"window_end"`
}

func (m *RateLimitInfo) Reset()         { *m = RateLimitInfo{} }
func (m *RateLimitInfo) String() string { return proto.CompactTextString(m) }
func (*RateLimitInfo) ProtoMessage()    {}
func (*RateLimitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{17}
}
func (m *RateLimitInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimitInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitInfo.Merge(m, src)
}
func (m *RateLimitInfo) XXX_Size() int {
	return m.Size()
}
func (m *RateLimitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitInfo proto.InternalMessageInfo

func (m *RateLimitInfo) GetLimitType() string {
	if m != nil {
		return m.LimitType
	}
	return ""
}

func (m *RateLimitInfo) GetCurrentCount() uint64 {
	if m != nil {
		return m.CurrentCount
	}
	return 0
}

func (m *RateLimitInfo) GetMaxCount() uint64 {
	if m != nil {
		return m.MaxCount
	}
	return 0
}

func (m *RateLimitInfo) GetWindowStart() time.Time {
	if m != nil {
		return m.WindowStart
	}
	return time.Time{}
}

func (m *RateLimitInfo) GetWindowEnd() time.Time {
	if m != nil {
		return m.WindowEnd
	}
	return time.Time{}
}

// QueryRateLimitStatusResponse is the response type for the Query/RateLimitStatus RPC method
type QueryRateLimitStatusResponse struct {
	// rate_limits contains all applicable rate limit statuses
	RateLimits []RateLimitInfo `protobuf:"bytes,1,rep,name=rate_limits,json=rateLimits,proto3" json:"rate_limits"`
}

func (m *QueryRateLimitStatusResponse) Reset()         { *m = QueryRateLimitStatusResponse{} }
func (m *QueryRateLimitStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRateLimitStatusResponse) ProtoMessage()    {}
func (*QueryRateLimitStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{18}
}
func (m *QueryRateLimitStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRateLimitStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRateLimitStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRateLimitStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRateLimitStatusResponse.Merge(m, src)
}
func (m *QueryRateLimitStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRateLimitStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRateLimitStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRateLimitStatusResponse proto.InternalMessageInfo

func (m *QueryRateLimitStatusResponse) GetRateLimits() []RateLimitInfo {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

// QueryTokenizationStatisticsRequest is the request type for the Query/TokenizationStatistics RPC method
type QueryTokenizationStatisticsRequest struct {
}

func (m *QueryTokenizationStatisticsRequest) Reset()         { *m = QueryTokenizationStatisticsRequest{} }
func (m *QueryTokenizationStatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizationStatisticsRequest) ProtoMessage()    {}
func (*QueryTokenizationStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{19}
}
func (m *QueryTokenizationStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizationStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizationStatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizationStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizationStatisticsRequest.Merge(m, src)
}
func (m *QueryTokenizationStatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizationStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizationStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizationStatisticsRequest proto.InternalMessageInfo

// QueryTokenizationStatisticsResponse is the response type for the Query/TokenizationStatistics RPC method
type QueryTokenizationStatisticsResponse struct {
	// total_tokenized is the total amount of tokens ever tokenized
	TotalTokenized cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_tokenized,json=totalTokenized,proto3,customtype=cosmossdk.io/math.Int" json:"total_tokenized"`
	// active_liquid_staked is the current amount of liquid staked tokens
	ActiveLiquidStaked cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=active_liquid_staked,json=activeLiquidStaked,proto3,customtype=cosmossdk.io/math.Int" json:"active_liquid_staked"`
	// total_records is the total number of tokenization records created
	TotalRecords uint64 `protobuf:"varint,3,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	// active_records is the current number of active tokenization records
	ActiveRecords uint64 `protobuf:"varint,4,opt,name=active_records,json=activeRecords,proto3" json:"active_records,omitempty"`
	// average_record_size is the average size of tokenization records
	AverageRecordSize cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=average_record_size,json=averageRecordSize,proto3,customtype=cosmossdk.io/math.Int" json:"average_record_size"`
	// validators_with_liquid_stake is the number of validators with liquid staked tokens
	ValidatorsWithLiquidStake uint64 `protobuf:"varint,6,opt,name=validators_with_liquid_stake,json=validatorsWithLiquidStake,proto3" json:"validators_with_liquid_stake,omitempty"`
	// total_denoms_created is the total number of unique LST denoms created
	TotalDenomsCreated uint64 `protobuf:"varint,7,opt,name=total_denoms_created,json=totalDenomsCreated,proto3" json:"total_denoms_created,omitempty"`
}

func (m *QueryTokenizationStatisticsResponse) Reset()         { *m = QueryTokenizationStatisticsResponse{} }
func (m *QueryTokenizationStatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizationStatisticsResponse) ProtoMessage()    {}
func (*QueryTokenizationStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{20}
}
func (m *QueryTokenizationStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizationStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizationStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizationStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizationStatisticsResponse.Merge(m, src)
}
func (m *QueryTokenizationStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizationStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizationStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizationStatisticsResponse proto.InternalMessageInfo

func (m *QueryTokenizationStatisticsResponse) GetTotalRecords() uint64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

func (m *QueryTokenizationStatisticsResponse) GetActiveRecords() uint64 {
	if m != nil {
		return m.ActiveRecords
	}
	return 0
}

func (m *QueryTokenizationStatisticsResponse) GetValidatorsWithLiquidStake() uint64 {
	if m != nil {
		return m.ValidatorsWithLiquidStake
	}
	return 0
}

func (m *QueryTokenizationStatisticsResponse) GetTotalDenomsCreated() uint64 {
	if m != nil {
		return m.TotalDenomsCreated
	}
	return 0
}

// QueryValidatorStatisticsRequest is the request type for the Query/ValidatorStatistics RPC method
type QueryValidatorStatisticsRequest struct {
	// validator_address is the address of the validator
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryValidatorStatisticsRequest) Reset()         { *m = QueryValidatorStatisticsRequest{} }
func (m *QueryValidatorStatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorStatisticsRequest) ProtoMessage()    {}
func (*QueryValidatorStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{21}
}
func (m *QueryValidatorStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorStatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorStatisticsRequest.Merge(m, src)
}
func (m *QueryValidatorStatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorStatisticsRequest proto.InternalMessageInfo

func (m *QueryValidatorStatisticsRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// QueryValidatorStatisticsResponse is the response type for the Query/ValidatorStatistics RPC method
type QueryValidatorStatisticsResponse struct {
	// validator_address is the address of the validator
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// total_liquid_staked is the current amount of liquid staked tokens for this validator
	TotalLiquidStaked cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total_liquid_staked,json=totalLiquidStaked,proto3,customtype=cosmossdk.io/math.Int" json:"total_liquid_staked"`
	// liquid_staking_percentage is the percentage of validator's tokens that are liquid staked
	LiquidStakingPercentage cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=liquid_staking_percentage,json=liquidStakingPercentage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"liquid_staking_percentage"`
	// active_records is the number of active tokenization records for this validator
	ActiveRecords uint64 `protobuf:"varint,4,opt,name=active_records,json=activeRecords,proto3" json:"active_records,omitempty"`
	// total_records_created is the total number of records ever created for this validator
	TotalRecordsCreated uint64 `protobuf:"varint,5,opt,name=total_records_created,json=totalRecordsCreated,proto3" json:"total_records_created,omitempty"`
	// rate_limit_usage is the current rate limit usage for this validator
	RateLimitUsage *RateLimitInfo `protobuf:"bytes,6,opt,name=rate_limit_usage,json=rateLimitUsage,proto3" json:"rate_limit_usage,omitempty"`
}

func (m *QueryValidatorStatisticsResponse) Reset()         { *m = QueryValidatorStatisticsResponse{} }
func (m *QueryValidatorStatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorStatisticsResponse) ProtoMessage()    {}
func (*QueryValidatorStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{22}
}
func (m *QueryValidatorStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorStatisticsResponse.Merge(m, src)
}
func (m *QueryValidatorStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorStatisticsResponse proto.InternalMessageInfo

func (m *QueryValidatorStatisticsResponse) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *QueryValidatorStatisticsResponse) GetActiveRecords() uint64 {
	if m != nil {
		return m.ActiveRecords
	}
	return 0
}

func (m *QueryValidatorStatisticsResponse) GetTotalRecordsCreated() uint64 {
	if m != nil {
		return m.TotalRecordsCreated
	}
	return 0
}

func (m *QueryValidatorStatisticsResponse) GetRateLimitUsage() *RateLimitInfo {
	if m != nil {
		return m.RateLimitUsage
	}
	return nil
}

// QueryExchangeRateRequest is the request type for the Query/ExchangeRate RPC method
type QueryExchangeRateRequest struct {
	// validator_address is the address of the validator
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryExchangeRateRequest) Reset()         { *m = QueryExchangeRateRequest{} }
func (m *QueryExchangeRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRateRequest) ProtoMessage()    {}
func (*QueryExchangeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{23}
}
func (m *QueryExchangeRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRateRequest.Merge(m, src)
}
func (m *QueryExchangeRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRateRequest proto.InternalMessageInfo

func (m *QueryExchangeRateRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// QueryExchangeRateResponse is the response type for the Query/ExchangeRate RPC method
type QueryExchangeRateResponse struct {
	// exchange_rate is the current exchange rate for the validator
	ExchangeRate ExchangeRate `protobuf:"bytes,1,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate"`
	// lst_denom is the denomination of the LST token
	LstDenom string `protobuf:"bytes,2,opt,name=lst_denom,json=lstDenom,proto3" json:"lst_denom,omitempty"`
	// native_amount is the amount of native tokens per 1 LST token
	NativeAmount cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=native_amount,json=nativeAmount,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"native_amount"`
}

func (m *QueryExchangeRateResponse) Reset()         { *m = QueryExchangeRateResponse{} }
func (m *QueryExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRateResponse) ProtoMessage()    {}
func (*QueryExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{24}
}
func (m *QueryExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRateResponse.Merge(m, src)
}
func (m *QueryExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRateResponse proto.InternalMessageInfo

func (m *QueryExchangeRateResponse) GetExchangeRate() ExchangeRate {
	if m != nil {
		return m.ExchangeRate
	}
	return ExchangeRate{}
}

func (m *QueryExchangeRateResponse) GetLstDenom() string {
	if m != nil {
		return m.LstDenom
	}
	return ""
}

// QueryAllExchangeRatesRequest is the request type for the Query/AllExchangeRates RPC method
type QueryAllExchangeRatesRequest struct {
	// pagination defines an optional pagination for the request
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExchangeRatesRequest) Reset()         { *m = QueryAllExchangeRatesRequest{} }
func (m *QueryAllExchangeRatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExchangeRatesRequest) ProtoMessage()    {}
func (*QueryAllExchangeRatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{25}
}
func (m *QueryAllExchangeRatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExchangeRatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExchangeRatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExchangeRatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExchangeRatesRequest.Merge(m, src)
}
func (m *QueryAllExchangeRatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExchangeRatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExchangeRatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExchangeRatesRequest proto.InternalMessageInfo

func (m *QueryAllExchangeRatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllExchangeRatesResponse is the response type for the Query/AllExchangeRates RPC method
type QueryAllExchangeRatesResponse struct {
	// exchange_rates is the list of all exchange rates
	ExchangeRates []ExchangeRate `protobuf:"bytes,1,rep,name=exchange_rates,json=exchangeRates,proto3" json:"exchange_rates"`
	// pagination defines the pagination in the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// global_exchange_rate is the overall exchange rate statistics
	GlobalExchangeRate *GlobalExchangeRate `protobuf:"bytes,3,opt,name=global_exchange_rate,json=globalExchangeRate,proto3" json:"global_exchange_rate,omitempty"`
}

func (m *QueryAllExchangeRatesResponse) Reset()         { *m = QueryAllExchangeRatesResponse{} }
func (m *QueryAllExchangeRatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExchangeRatesResponse) ProtoMessage()    {}
func (*QueryAllExchangeRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad2cf0543b0bb47, []int{26}
}
func (m *QueryAllExchangeRatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExchangeRatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExchangeRatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExchangeRatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExchangeRatesResponse.Merge(m, src)
}
func (m *QueryAllExchangeRatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExchangeRatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExchangeRatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExchangeRatesResponse proto.InternalMessageInfo

func (m *QueryAllExchangeRatesResponse) GetExchangeRates() []ExchangeRate {
	if m != nil {
		return m.ExchangeRates
	}
	return nil
}

func (m *QueryAllExchangeRatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllExchangeRatesResponse) GetGlobalExchangeRate() *GlobalExchangeRate {
	if m != nil {
		return m.GlobalExchangeRate
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "flora.liquidstaking.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "flora.liquidstaking.v1.QueryParamsResponse")
	proto.RegisterType((*QueryTokenizationRecordRequest)(nil), "flora.liquidstaking.v1.QueryTokenizationRecordRequest")
	proto.RegisterType((*QueryTokenizationRecordResponse)(nil), "flora.liquidstaking.v1.QueryTokenizationRecordResponse")
	proto.RegisterType((*QueryTokenizationRecordsRequest)(nil), "flora.liquidstaking.v1.QueryTokenizationRecordsRequest")
	proto.RegisterType((*QueryTokenizationRecordsResponse)(nil), "flora.liquidstaking.v1.QueryTokenizationRecordsResponse")
	proto.RegisterType((*QueryTokenizationRecordsByValidatorRequest)(nil), "flora.liquidstaking.v1.QueryTokenizationRecordsByValidatorRequest")
	proto.RegisterType((*QueryTokenizationRecordsByValidatorResponse)(nil), "flora.liquidstaking.v1.QueryTokenizationRecordsByValidatorResponse")
	proto.RegisterType((*QueryTokenizationRecordsByOwnerRequest)(nil), "flora.liquidstaking.v1.QueryTokenizationRecordsByOwnerRequest")
	proto.RegisterType((*QueryTokenizationRecordsByOwnerResponse)(nil), "flora.liquidstaking.v1.QueryTokenizationRecordsByOwnerResponse")
	proto.RegisterType((*QueryTotalLiquidStakedRequest)(nil), "flora.liquidstaking.v1.QueryTotalLiquidStakedRequest")
	proto.RegisterType((*QueryTotalLiquidStakedResponse)(nil), "flora.liquidstaking.v1.QueryTotalLiquidStakedResponse")
	proto.RegisterType((*QueryValidatorLiquidStakedRequest)(nil), "flora.liquidstaking.v1.QueryValidatorLiquidStakedRequest")
	proto.RegisterType((*QueryValidatorLiquidStakedResponse)(nil), "flora.liquidstaking.v1.QueryValidatorLiquidStakedResponse")
	proto.RegisterType((*QueryTokenizationRecordsByDenomRequest)(nil), "flora.liquidstaking.v1.QueryTokenizationRecordsByDenomRequest")
	proto.RegisterType((*QueryTokenizationRecordsByDenomResponse)(nil), "flora.liquidstaking.v1.QueryTokenizationRecordsByDenomResponse")
	proto.RegisterType((*QueryRateLimitStatusRequest)(nil), "flora.liquidstaking.v1.QueryRateLimitStatusRequest")
	proto.RegisterType((*RateLimitInfo)(nil), "flora.liquidstaking.v1.RateLimitInfo")
	proto.RegisterType((*QueryRateLimitStatusResponse)(nil), "flora.liquidstaking.v1.QueryRateLimitStatusResponse")
	proto.RegisterType((*QueryTokenizationStatisticsRequest)(nil), "flora.liquidstaking.v1.QueryTokenizationStatisticsRequest")
	proto.RegisterType((*QueryTokenizationStatisticsResponse)(nil), "flora.liquidstaking.v1.QueryTokenizationStatisticsResponse")
	proto.RegisterType((*QueryValidatorStatisticsRequest)(nil), "flora.liquidstaking.v1.QueryValidatorStatisticsRequest")
	proto.RegisterType((*QueryValidatorStatisticsResponse)(nil), "flora.liquidstaking.v1.QueryValidatorStatisticsResponse")
	proto.RegisterType((*QueryExchangeRateRequest)(nil), "flora.liquidstaking.v1.QueryExchangeRateRequest")
	proto.RegisterType((*QueryExchangeRateResponse)(nil), "flora.liquidstaking.v1.QueryExchangeRateResponse")
	proto.RegisterType((*QueryAllExchangeRatesRequest)(nil), "flora.liquidstaking.v1.QueryAllExchangeRatesRequest")
	proto.RegisterType((*QueryAllExchangeRatesResponse)(nil), "flora.liquidstaking.v1.QueryAllExchangeRatesResponse")
}

func init() {
	proto.RegisterFile("flora/liquidstaking/v1/query.proto", fileDescriptor_aad2cf0543b0bb47)
}

var fileDescriptor_aad2cf0543b0bb47 = []byte{
	// 1773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xcf, 0x6f, 0x14, 0x47,
	0x16, 0x76, 0xdb, 0xc6, 0xe0, 0x87, 0xc7, 0x40, 0x79, 0x60, 0xed, 0x01, 0xc6, 0x6c, 0x03, 0x06,
	0xe1, 0xa5, 0x9b, 0xc1, 0xfc, 0x58, 0x60, 0xb5, 0xac, 0xc7, 0xf6, 0x02, 0xc6, 0xbb, 0x98, 0xb6,
	0x43, 0x94, 0x90, 0x68, 0x54, 0x9e, 0x29, 0xb7, 0x5b, 0xee, 0xe9, 0x1e, 0xba, 0x6b, 0xc6, 0x36,
	0x96, 0x2f, 0x39, 0x44, 0xca, 0x0d, 0x29, 0xca, 0x21, 0x97, 0x48, 0xf9, 0x0b, 0x72, 0x41, 0x41,
	0xb9, 0xa0, 0x28, 0x97, 0xa0, 0x9c, 0x10, 0xb9, 0x44, 0x89, 0x44, 0x02, 0xe4, 0x92, 0x7f, 0x20,
	0xb7, 0x48, 0x51, 0x57, 0x55, 0x8f, 0xbb, 0x3d, 0xdd, 0x63, 0xf7, 0x60, 0x45, 0x9c, 0xa0, 0xab,
	0xde, 0x7b, 0xf5, 0x7d, 0xaf, 0xbe, 0x79, 0xf5, 0xaa, 0x0c, 0xf2, 0xbc, 0x69, 0x3b, 0x58, 0x35,
	0x8d, 0x7b, 0x55, 0xa3, 0xe4, 0x52, 0xbc, 0x68, 0x58, 0xba, 0x5a, 0xcb, 0xa9, 0xf7, 0xaa, 0xc4,
	0x59, 0x51, 0x2a, 0x8e, 0x4d, 0x6d, 0x74, 0x80, 0xd9, 0x28, 0x21, 0x1b, 0xa5, 0x96, 0xcb, 0xa4,
	0x75, 0x5b, 0xb7, 0x99, 0x89, 0xea, 0xfd, 0x8f, 0x5b, 0x67, 0x0e, 0xe9, 0xb6, 0xad, 0x9b, 0x44,
	0xc5, 0x15, 0x43, 0xc5, 0x96, 0x65, 0x53, 0x4c, 0x0d, 0xdb, 0x72, 0xc5, 0xec, 0xa0, 0x98, 0x65,
	0x5f, 0x73, 0xd5, 0x79, 0x95, 0x1a, 0x65, 0xe2, 0x52, 0x5c, 0xae, 0x08, 0x83, 0x53, 0x45, 0xdb,
	0x2d, 0xdb, 0xae, 0x3a, 0x87, 0x5d, 0xc2, 0x51, 0xa8, 0xb5, 0xdc, 0x1c, 0xa1, 0x38, 0xa7, 0x56,
	0xb0, 0x6e, 0x58, 0x2c, 0x9a, 0xb0, 0x1d, 0xe0, 0xb6, 0x05, 0x8e, 0x81, 0x7f, 0x88, 0xa9, 0x38,
	0x5e, 0x74, 0xa5, 0x42, 0x84, 0x8d, 0x9c, 0x06, 0x74, 0xdb, 0x5b, 0x60, 0x1a, 0x3b, 0xb8, 0xec,
	0x6a, 0xe4, 0x5e, 0x95, 0xb8, 0x54, 0x7e, 0x07, 0xfa, 0x42, 0xa3, 0x6e, 0xc5, 0xb6, 0x5c, 0x82,
	0xf2, 0xd0, 0x55, 0x61, 0x23, 0xfd, 0xd2, 0x11, 0xe9, 0xe4, 0xee, 0xb3, 0xc7, 0x94, 0xe8, 0xac,
	0x28, 0xff, 0xb3, 0x4b, 0x55, 0x93, 0x70, 0xef, 0x7c, 0xe7, 0x93, 0xe7, 0x83, 0x6d, 0x9a, 0xf0,
	0x94, 0xcf, 0x40, 0x96, 0x85, 0x9e, 0xb5, 0x17, 0x89, 0x65, 0xdc, 0x67, 0x54, 0x34, 0x52, 0xb4,
	0x9d, 0x92, 0x58, 0x1c, 0xf5, 0x42, 0xbb, 0x51, 0x62, 0x2b, 0x74, 0x6a, 0xed, 0x46, 0x49, 0x5e,
	0x84, 0xc1, 0x58, 0x0f, 0x01, 0xec, 0x3a, 0x74, 0x39, 0x6c, 0x44, 0x00, 0x3b, 0x15, 0x07, 0xac,
	0x31, 0x86, 0x0f, 0x8f, 0xfb, 0xcb, 0x46, 0xec, 0x62, 0x7e, 0x72, 0xd0, 0x7f, 0x01, 0xd6, 0x77,
	0x41, 0x2c, 0x38, 0xa4, 0x88, 0xcc, 0x7b, 0x5b, 0xa6, 0x70, 0xe1, 0x88, 0x2d, 0x53, 0xa6, 0xb1,
	0x4e, 0x84, 0xaf, 0x16, 0xf0, 0x94, 0x1f, 0x49, 0x70, 0x24, 0x7e, 0x2d, 0xc1, 0x6c, 0x12, 0x76,
	0x72, 0x64, 0x5e, 0xce, 0x3b, 0x5a, 0xa2, 0xe6, 0x07, 0x40, 0xd7, 0x42, 0xc0, 0xdb, 0x19, 0xf0,
	0x13, 0x9b, 0x02, 0xe7, 0x40, 0x42, 0xc8, 0x3f, 0x97, 0xe0, 0x54, 0x1c, 0xf2, 0xfc, 0xca, 0x1d,
	0x6c, 0x1a, 0x25, 0x4c, 0x6d, 0xc7, 0x4f, 0xd8, 0x30, 0xec, 0xab, 0xf9, 0x63, 0x05, 0x5c, 0x2a,
	0x39, 0xc4, 0xe5, 0x0a, 0xea, 0xd6, 0xf6, 0xd6, 0x27, 0x46, 0xf9, 0xf8, 0x86, 0xec, 0xb6, 0xb7,
	0x9c, 0xdd, 0x6f, 0x24, 0x18, 0xde, 0x12, 0xc6, 0x37, 0x39, 0xd1, 0x9f, 0x48, 0x30, 0x14, 0x4f,
	0xe2, 0xd6, 0x92, 0x45, 0xea, 0x49, 0x3e, 0x0a, 0x29, 0xdb, 0xfb, 0xde, 0x90, 0xe0, 0x1e, 0x36,
	0xb8, 0xdd, 0xc9, 0x7d, 0x2c, 0xc1, 0x89, 0x4d, 0x71, 0xbd, 0xc9, 0x89, 0x1d, 0x84, 0xc3, 0x02,
	0x3f, 0xc5, 0xe6, 0x14, 0x03, 0x32, 0x43, 0xf1, 0x22, 0xf1, 0x8b, 0x90, 0xbc, 0x56, 0x2f, 0x53,
	0x0d, 0x06, 0x82, 0xd7, 0x5d, 0xe8, 0xa3, 0xde, 0x64, 0x81, 0xf3, 0x28, 0xb8, 0x6c, 0x9a, 0xa7,
	0x3d, 0x3f, 0xec, 0xe1, 0xfe, 0xf1, 0xf9, 0xe0, 0x7e, 0x8e, 0xcd, 0x2d, 0x2d, 0x2a, 0x86, 0xad,
	0x96, 0x31, 0x5d, 0x50, 0x6e, 0x58, 0xf4, 0xd9, 0xc3, 0xd3, 0x20, 0x40, 0xdf, 0xb0, 0xa8, 0xb6,
	0x8f, 0x6e, 0x5c, 0x44, 0x9e, 0x86, 0xbf, 0xb3, 0xe5, 0xeb, 0x3a, 0x8d, 0xc0, 0x98, 0xe8, 0x77,
	0x25, 0xd7, 0x40, 0x6e, 0x16, 0x51, 0x90, 0x9a, 0x86, 0xd4, 0x6b, 0xd3, 0xe9, 0x31, 0x83, 0x4c,
	0x3e, 0x6c, 0x2a, 0xe1, 0x71, 0x62, 0xd9, 0x65, 0x9f, 0x4f, 0x1a, 0x76, 0x94, 0xbc, 0x6f, 0xc1,
	0x81, 0x7f, 0xfc, 0x45, 0x9a, 0x15, 0x40, 0xde, 0x64, 0xcd, 0x5e, 0x84, 0x83, 0x0c, 0xbf, 0x86,
	0x29, 0x99, 0x32, 0xca, 0x06, 0x9d, 0xa1, 0x98, 0x56, 0xeb, 0xc7, 0x52, 0x3f, 0xec, 0x0c, 0x6b,
	0xc0, 0xff, 0x94, 0x3f, 0xeb, 0x80, 0x54, 0xdd, 0xe9, 0x86, 0x35, 0x6f, 0xa3, 0xc3, 0x00, 0xa6,
	0xf7, 0x51, 0xf0, 0x5a, 0x01, 0x61, 0xde, 0xcd, 0x46, 0x66, 0x57, 0x2a, 0x04, 0x69, 0xd0, 0x5b,
	0xac, 0x3a, 0x0e, 0xb1, 0x68, 0x01, 0x97, 0xed, 0xaa, 0x45, 0x19, 0xec, 0x84, 0x32, 0x48, 0x89,
	0x10, 0xa3, 0x2c, 0x02, 0x9a, 0x04, 0x28, 0xe3, 0x65, 0x3f, 0x5e, 0x47, 0xf2, 0x78, 0xdd, 0x65,
	0xbc, 0x2c, 0x62, 0x1d, 0x05, 0x3f, 0x78, 0xa1, 0xc8, 0xc2, 0x75, 0xb2, 0x66, 0xa1, 0x47, 0x0c,
	0x8e, 0x31, 0xa3, 0x83, 0xe0, 0x79, 0x08, 0x83, 0x1d, 0xcc, 0x60, 0x57, 0x19, 0x2f, 0xf3, 0xc9,
	0x6b, 0xd0, 0xb3, 0x64, 0x58, 0x25, 0x7b, 0xc9, 0xd3, 0xb9, 0x43, 0xfb, 0xbb, 0xd8, 0xb6, 0x64,
	0x14, 0xde, 0x99, 0x29, 0x7e, 0x67, 0xa6, 0xcc, 0xfa, 0x9d, 0x59, 0x7e, 0x97, 0x87, 0xf5, 0xc1,
	0xcf, 0x83, 0x92, 0xb6, 0x9b, 0x7b, 0xce, 0x78, 0x8e, 0x68, 0x0c, 0x40, 0x04, 0x22, 0x56, 0xa9,
	0x7f, 0x67, 0x82, 0x30, 0xdd, 0xdc, 0x6f, 0xc2, 0x2a, 0xc9, 0x26, 0x1c, 0x8a, 0xde, 0x59, 0x21,
	0xc7, 0x29, 0xd8, 0xed, 0x60, 0x4a, 0x0a, 0x6c, 0x87, 0x7c, 0x49, 0x1e, 0x8f, 0x93, 0x64, 0x68,
	0xab, 0x85, 0x1a, 0xc1, 0xf1, 0x07, 0x5d, 0xf9, 0x98, 0xa8, 0x04, 0x41, 0xe9, 0x7a, 0x0b, 0x1a,
	0x2e, 0x35, 0x8a, 0xf5, 0x16, 0xf0, 0xf7, 0x0e, 0x38, 0xda, 0xd4, 0x4c, 0x60, 0x9b, 0x85, 0x3d,
	0xbc, 0x0c, 0x52, 0x6e, 0xd7, 0x5a, 0xcd, 0xe8, 0x65, 0x31, 0x66, 0xfd, 0x10, 0xe8, 0x7d, 0x48,
	0xe3, 0x22, 0x35, 0x6a, 0x64, 0x43, 0x75, 0x6d, 0x41, 0x87, 0x88, 0x07, 0x0a, 0x96, 0x3b, 0x4f,
	0x40, 0x1c, 0xb4, 0xff, 0x2b, 0xef, 0xe0, 0x02, 0x62, 0x83, 0xa2, 0x26, 0xa0, 0xe3, 0xd0, 0x2b,
	0x30, 0xf8, 0x56, 0x5c, 0x66, 0x29, 0x3e, 0xea, 0x9b, 0xdd, 0x85, 0x3e, 0x5c, 0x23, 0x0e, 0xd6,
	0x7d, 0xbb, 0x82, 0x6b, 0xdc, 0x27, 0x4c, 0x71, 0x49, 0xcf, 0x01, 0x11, 0x87, 0x47, 0x9e, 0x31,
	0xee, 0x13, 0x74, 0x15, 0x0e, 0xd5, 0x2b, 0xb9, 0x5b, 0x58, 0x32, 0xe8, 0x42, 0x28, 0x21, 0x4c,
	0xb7, 0x9d, 0xda, 0xc0, 0xba, 0xcd, 0xdb, 0x06, 0x5d, 0x08, 0x50, 0x45, 0x67, 0x20, 0xcd, 0x99,
	0xb2, 0x62, 0xea, 0x16, 0x8a, 0x0e, 0xc1, 0x94, 0x70, 0xa5, 0x76, 0x6a, 0x88, 0xcd, 0xb1, 0xda,
	0xe7, 0x8e, 0xf1, 0x19, 0xf9, 0xff, 0xa2, 0x03, 0xae, 0x1f, 0x14, 0x0d, 0xda, 0x48, 0x76, 0xf0,
	0x7c, 0xdb, 0x21, 0xda, 0xdc, 0xc8, 0x80, 0x42, 0x45, 0x89, 0x5a, 0xc4, 0x98, 0x93, 0xb7, 0x7d,
	0x3b, 0x4e, 0x5e, 0x54, 0x86, 0x81, 0x40, 0x58, 0xc3, 0xd2, 0x0b, 0x15, 0xe2, 0x14, 0x89, 0x45,
	0xb1, 0x4e, 0x44, 0xd9, 0xca, 0x89, 0x25, 0x0e, 0x36, 0x2e, 0x31, 0x45, 0x74, 0x5c, 0x5c, 0x19,
	0x27, 0xc5, 0xc0, 0x42, 0xe3, 0xa4, 0xa8, 0xfd, 0x6d, 0xfd, 0x4c, 0x34, 0x2c, 0x7d, 0xba, 0x1e,
	0x71, 0xab, 0x22, 0x3b, 0x0b, 0xfb, 0x43, 0x82, 0xad, 0xef, 0x23, 0x2f, 0x6c, 0x7d, 0x41, 0xe1,
	0x8a, 0x8d, 0x44, 0xb7, 0x60, 0xef, 0x7a, 0xd5, 0x28, 0x54, 0x5d, 0x8f, 0x00, 0xaf, 0x73, 0x5b,
	0x2b, 0x1d, 0x5a, 0x6f, 0xbd, 0x68, 0xbc, 0xe5, 0x39, 0xcb, 0x18, 0xfa, 0xd9, 0x46, 0x4e, 0x2c,
	0x17, 0x17, 0xb0, 0xa5, 0x13, 0xcf, 0xda, 0x97, 0xc4, 0x44, 0xec, 0x06, 0xe6, 0xfb, 0x9f, 0x3d,
	0x3c, 0x9d, 0x16, 0xb9, 0x10, 0x5b, 0x38, 0x43, 0x1d, 0xc3, 0xd2, 0x23, 0xc4, 0xf2, 0x42, 0x82,
	0x81, 0x88, 0x35, 0x84, 0x4a, 0x6e, 0x41, 0x8a, 0x88, 0xf1, 0x82, 0x87, 0x6d, 0xb3, 0x6b, 0x68,
	0x30, 0x88, 0x28, 0x84, 0x3d, 0x24, 0x30, 0xe6, 0x9d, 0x11, 0xa6, 0x4b, 0xf9, 0x6f, 0x83, 0xeb,
	0x47, 0xdb, 0x65, 0xba, 0x94, 0xfd, 0x20, 0xd0, 0x1d, 0x48, 0x79, 0x27, 0x6f, 0x8d, 0x84, 0x0f,
	0xad, 0x16, 0x76, 0xbf, 0x87, 0xc7, 0xe1, 0xa7, 0x97, 0x3c, 0x2f, 0xaa, 0xfd, 0xa8, 0x69, 0x06,
	0x01, 0x6e, 0xfb, 0xfd, 0xf2, 0xd3, 0x76, 0xd1, 0xe4, 0x36, 0x2e, 0x24, 0xf2, 0x79, 0x1b, 0x7a,
	0x43, 0xf9, 0xf4, 0x8f, 0x96, 0x24, 0x09, 0x4d, 0x05, 0x13, 0xba, 0x7d, 0xdd, 0x0e, 0x7a, 0x0f,
	0xd2, 0xba, 0x69, 0xcf, 0x61, 0xb3, 0x10, 0xde, 0xf2, 0x8e, 0xe6, 0x17, 0xfc, 0x6b, 0xcc, 0x27,
	0xa4, 0x1e, 0xa4, 0x37, 0x8c, 0x9d, 0x7d, 0x92, 0x86, 0x1d, 0x2c, 0x37, 0xe8, 0x23, 0x09, 0xba,
	0xf8, 0x43, 0x05, 0x8a, 0x0d, 0xda, 0xf8, 0x42, 0x92, 0x19, 0xde, 0x92, 0x2d, 0xe7, 0x25, 0x0f,
	0x7d, 0xf0, 0xfd, 0xaf, 0x1f, 0xb7, 0x1f, 0x41, 0x59, 0x35, 0xe6, 0x45, 0x86, 0xbf, 0x8d, 0xa0,
	0xaf, 0x25, 0x40, 0x8d, 0x0d, 0x25, 0xba, 0xd0, 0x74, 0xad, 0xd8, 0x87, 0x94, 0xcc, 0xc5, 0xc4,
	0x7e, 0x02, 0xef, 0x25, 0x86, 0x77, 0x04, 0xe5, 0xe2, 0xf0, 0xd2, 0x80, 0xaf, 0x5f, 0x92, 0xd4,
	0x55, 0xa3, 0xb4, 0x86, 0x1e, 0x4b, 0xd0, 0x17, 0xd1, 0x60, 0xa3, 0xa4, 0x58, 0xea, 0x89, 0xfe,
	0x67, 0x72, 0x47, 0xc1, 0xe2, 0x1c, 0x63, 0xa1, 0xa0, 0x7f, 0x24, 0x61, 0x81, 0xfe, 0x90, 0x20,
	0xdb, 0xfc, 0xc9, 0x00, 0xe5, 0x93, 0x42, 0x6a, 0x7c, 0x13, 0xc9, 0x8c, 0xbd, 0x56, 0x0c, 0xc1,
	0x50, 0x63, 0x0c, 0xa7, 0xd0, 0x64, 0xa2, 0x7d, 0xaa, 0x17, 0x5d, 0x75, 0xb5, 0xa1, 0x64, 0xaf,
	0xa1, 0xdf, 0x24, 0xc8, 0xc4, 0xdf, 0xea, 0xd1, 0xbf, 0x93, 0xe3, 0x0e, 0x3e, 0x53, 0x64, 0xae,
	0xb6, 0xec, 0x2f, 0x38, 0x4f, 0x32, 0xce, 0xe3, 0x28, 0x9f, 0x88, 0x33, 0x7b, 0x05, 0x51, 0x57,
	0x43, 0x2f, 0x24, 0x6b, 0xe8, 0x91, 0x04, 0xfb, 0x1a, 0x2e, 0xf8, 0xe8, 0xfc, 0x26, 0x10, 0xa3,
	0x5f, 0x0c, 0x32, 0x17, 0x92, 0xba, 0x09, 0x42, 0x23, 0x8c, 0xd0, 0x69, 0x34, 0x1c, 0x4f, 0xa8,
	0xa1, 0xd7, 0x41, 0x3f, 0x49, 0xb0, 0x3f, 0xf2, 0x26, 0x8f, 0x2e, 0x35, 0x85, 0xd1, 0xec, 0x3d,
	0x21, 0x73, 0xb9, 0x15, 0x57, 0xc1, 0xe2, 0x26, 0x63, 0x31, 0x81, 0xc6, 0xe2, 0x58, 0xac, 0x4b,
	0x2d, 0xc4, 0x24, 0x52, 0x83, 0x2f, 0xe2, 0x34, 0xc8, 0x0f, 0xe6, 0x16, 0x34, 0x18, 0x7c, 0x67,
	0x68, 0x45, 0x83, 0xa1, 0xe7, 0x01, 0x39, 0xcf, 0xc8, 0xfe, 0x0b, 0x5d, 0x4e, 0xa4, 0x41, 0xd6,
	0x65, 0xa8, 0xab, 0xec, 0x9f, 0x35, 0xf4, 0x95, 0x04, 0x7b, 0x36, 0xdc, 0xf7, 0xd0, 0x48, 0x53,
	0x60, 0xd1, 0xf7, 0xfe, 0xcc, 0xb9, 0x64, 0x4e, 0x82, 0xc2, 0x15, 0x46, 0xe1, 0x3c, 0x1a, 0x89,
	0xa3, 0x10, 0x68, 0x1d, 0x5d, 0xe6, 0xaa, 0xae, 0xd6, 0xf7, 0xe7, 0x3b, 0x09, 0x0e, 0x44, 0x5f,
	0x0b, 0xd1, 0xe5, 0x2d, 0xe7, 0xb6, 0xe1, 0x5a, 0x91, 0xb9, 0xd2, 0x92, 0xaf, 0x20, 0x74, 0x91,
	0x11, 0xca, 0x21, 0x75, 0x4b, 0x7b, 0xe2, 0xae, 0x23, 0x7e, 0x26, 0x41, 0x5f, 0xc4, 0xd5, 0x64,
	0x93, 0x13, 0x2b, 0xfe, 0x76, 0xb4, 0xc9, 0x89, 0xd5, 0xe4, 0x16, 0x24, 0x5f, 0x67, 0x1c, 0xf2,
	0xe8, 0x3f, 0x9b, 0xff, 0x88, 0xd6, 0x09, 0x44, 0xfe, 0x82, 0xbe, 0x94, 0xa0, 0x27, 0xd8, 0xf0,
	0xa0, 0x33, 0x4d, 0x41, 0x45, 0x74, 0xf4, 0x99, 0x5c, 0x02, 0x0f, 0x81, 0x7f, 0x94, 0xe1, 0xbf,
	0x82, 0x2e, 0xc5, 0xe1, 0x0f, 0xb5, 0x72, 0x91, 0xc0, 0xbf, 0x90, 0x60, 0xef, 0xc6, 0x7e, 0x15,
	0x35, 0x97, 0x78, 0x4c, 0x1f, 0x9d, 0x39, 0x9f, 0xd0, 0x4b, 0x90, 0x50, 0x18, 0x89, 0x93, 0x68,
	0x68, 0x4b, 0x24, 0xdc, 0xfc, 0xcd, 0x27, 0x2f, 0xb3, 0xd2, 0xd3, 0x97, 0x59, 0xe9, 0x97, 0x97,
	0x59, 0xe9, 0xc1, 0xab, 0x6c, 0xdb, 0xd3, 0x57, 0xd9, 0xb6, 0x1f, 0x5e, 0x65, 0xdb, 0xde, 0xcd,
	0xe9, 0x06, 0x5d, 0xa8, 0xce, 0x29, 0x45, 0xbb, 0xac, 0x3a, 0xb6, 0x69, 0x16, 0x17, 0xb0, 0x61,
	0xb9, 0x22, 0xec, 0xf2, 0x86, 0xc0, 0xec, 0x8f, 0x72, 0x73, 0x5d, 0xec, 0xc9, 0x68, 0xe4, 0xcf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xd5, 0x3e, 0x03, 0x93, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the module parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// TokenizationRecord queries a specific tokenization record by ID
	TokenizationRecord(ctx context.Context, in *QueryTokenizationRecordRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordResponse, error)
	// TokenizationRecords queries all tokenization records
	TokenizationRecords(ctx context.Context, in *QueryTokenizationRecordsRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsResponse, error)
	// TokenizationRecordsByValidator queries tokenization records by validator
	TokenizationRecordsByValidator(ctx context.Context, in *QueryTokenizationRecordsByValidatorRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsByValidatorResponse, error)
	// TokenizationRecordsByOwner queries tokenization records by owner
	TokenizationRecordsByOwner(ctx context.Context, in *QueryTokenizationRecordsByOwnerRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsByOwnerResponse, error)
	// TotalLiquidStaked queries the total amount of liquid staked tokens
	TotalLiquidStaked(ctx context.Context, in *QueryTotalLiquidStakedRequest, opts ...grpc.CallOption) (*QueryTotalLiquidStakedResponse, error)
	// ValidatorLiquidStaked queries the amount of liquid staked tokens for a specific validator
	ValidatorLiquidStaked(ctx context.Context, in *QueryValidatorLiquidStakedRequest, opts ...grpc.CallOption) (*QueryValidatorLiquidStakedResponse, error)
	// TokenizationRecordsByDenom queries tokenization records by LST denomination
	TokenizationRecordsByDenom(ctx context.Context, in *QueryTokenizationRecordsByDenomRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsByDenomResponse, error)
	// RateLimitStatus queries the current rate limit usage for an address
	RateLimitStatus(ctx context.Context, in *QueryRateLimitStatusRequest, opts ...grpc.CallOption) (*QueryRateLimitStatusResponse, error)
	// TokenizationStatistics queries aggregated tokenization statistics
	TokenizationStatistics(ctx context.Context, in *QueryTokenizationStatisticsRequest, opts ...grpc.CallOption) (*QueryTokenizationStatisticsResponse, error)
	// ValidatorStatistics queries detailed statistics for a specific validator
	ValidatorStatistics(ctx context.Context, in *QueryValidatorStatisticsRequest, opts ...grpc.CallOption) (*QueryValidatorStatisticsResponse, error)
	// ExchangeRate returns the current exchange rate for a validator
	ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error)
	// AllExchangeRates returns all exchange rates
	AllExchangeRates(ctx context.Context, in *QueryAllExchangeRatesRequest, opts ...grpc.CallOption) (*QueryAllExchangeRatesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizationRecord(ctx context.Context, in *QueryTokenizationRecordRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordResponse, error) {
	out := new(QueryTokenizationRecordResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/TokenizationRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizationRecords(ctx context.Context, in *QueryTokenizationRecordsRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsResponse, error) {
	out := new(QueryTokenizationRecordsResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/TokenizationRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizationRecordsByValidator(ctx context.Context, in *QueryTokenizationRecordsByValidatorRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsByValidatorResponse, error) {
	out := new(QueryTokenizationRecordsByValidatorResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/TokenizationRecordsByValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizationRecordsByOwner(ctx context.Context, in *QueryTokenizationRecordsByOwnerRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsByOwnerResponse, error) {
	out := new(QueryTokenizationRecordsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/TokenizationRecordsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalLiquidStaked(ctx context.Context, in *QueryTotalLiquidStakedRequest, opts ...grpc.CallOption) (*QueryTotalLiquidStakedResponse, error) {
	out := new(QueryTotalLiquidStakedResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/TotalLiquidStaked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorLiquidStaked(ctx context.Context, in *QueryValidatorLiquidStakedRequest, opts ...grpc.CallOption) (*QueryValidatorLiquidStakedResponse, error) {
	out := new(QueryValidatorLiquidStakedResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/ValidatorLiquidStaked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizationRecordsByDenom(ctx context.Context, in *QueryTokenizationRecordsByDenomRequest, opts ...grpc.CallOption) (*QueryTokenizationRecordsByDenomResponse, error) {
	out := new(QueryTokenizationRecordsByDenomResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/TokenizationRecordsByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RateLimitStatus(ctx context.Context, in *QueryRateLimitStatusRequest, opts ...grpc.CallOption) (*QueryRateLimitStatusResponse, error) {
	out := new(QueryRateLimitStatusResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/RateLimitStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizationStatistics(ctx context.Context, in *QueryTokenizationStatisticsRequest, opts ...grpc.CallOption) (*QueryTokenizationStatisticsResponse, error) {
	out := new(QueryTokenizationStatisticsResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/TokenizationStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorStatistics(ctx context.Context, in *QueryValidatorStatisticsRequest, opts ...grpc.CallOption) (*QueryValidatorStatisticsResponse, error) {
	out := new(QueryValidatorStatisticsResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/ValidatorStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error) {
	out := new(QueryExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/ExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllExchangeRates(ctx context.Context, in *QueryAllExchangeRatesRequest, opts ...grpc.CallOption) (*QueryAllExchangeRatesResponse, error) {
	out := new(QueryAllExchangeRatesResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Query/AllExchangeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the module parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// TokenizationRecord queries a specific tokenization record by ID
	TokenizationRecord(context.Context, *QueryTokenizationRecordRequest) (*QueryTokenizationRecordResponse, error)
	// TokenizationRecords queries all tokenization records
	TokenizationRecords(context.Context, *QueryTokenizationRecordsRequest) (*QueryTokenizationRecordsResponse, error)
	// TokenizationRecordsByValidator queries tokenization records by validator
	TokenizationRecordsByValidator(context.Context, *QueryTokenizationRecordsByValidatorRequest) (*QueryTokenizationRecordsByValidatorResponse, error)
	// TokenizationRecordsByOwner queries tokenization records by owner
	TokenizationRecordsByOwner(context.Context, *QueryTokenizationRecordsByOwnerRequest) (*QueryTokenizationRecordsByOwnerResponse, error)
	// TotalLiquidStaked queries the total amount of liquid staked tokens
	TotalLiquidStaked(context.Context, *QueryTotalLiquidStakedRequest) (*QueryTotalLiquidStakedResponse, error)
	// ValidatorLiquidStaked queries the amount of liquid staked tokens for a specific validator
	ValidatorLiquidStaked(context.Context, *QueryValidatorLiquidStakedRequest) (*QueryValidatorLiquidStakedResponse, error)
	// TokenizationRecordsByDenom queries tokenization records by LST denomination
	TokenizationRecordsByDenom(context.Context, *QueryTokenizationRecordsByDenomRequest) (*QueryTokenizationRecordsByDenomResponse, error)
	// RateLimitStatus queries the current rate limit usage for an address
	RateLimitStatus(context.Context, *QueryRateLimitStatusRequest) (*QueryRateLimitStatusResponse, error)
	// TokenizationStatistics queries aggregated tokenization statistics
	TokenizationStatistics(context.Context, *QueryTokenizationStatisticsRequest) (*QueryTokenizationStatisticsResponse, error)
	// ValidatorStatistics queries detailed statistics for a specific validator
	ValidatorStatistics(context.Context, *QueryValidatorStatisticsRequest) (*QueryValidatorStatisticsResponse, error)
	// ExchangeRate returns the current exchange rate for a validator
	ExchangeRate(context.Context, *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error)
	// AllExchangeRates returns all exchange rates
	AllExchangeRates(context.Context, *QueryAllExchangeRatesRequest) (*QueryAllExchangeRatesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) TokenizationRecord(ctx context.Context, req *QueryTokenizationRecordRequest) (*QueryTokenizationRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizationRecord not implemented")
}
func (*UnimplementedQueryServer) TokenizationRecords(ctx context.Context, req *QueryTokenizationRecordsRequest) (*QueryTokenizationRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizationRecords not implemented")
}
func (*UnimplementedQueryServer) TokenizationRecordsByValidator(ctx context.Context, req *QueryTokenizationRecordsByValidatorRequest) (*QueryTokenizationRecordsByValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizationRecordsByValidator not implemented")
}
func (*UnimplementedQueryServer) TokenizationRecordsByOwner(ctx context.Context, req *QueryTokenizationRecordsByOwnerRequest) (*QueryTokenizationRecordsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizationRecordsByOwner not implemented")
}
func (*UnimplementedQueryServer) TotalLiquidStaked(ctx context.Context, req *QueryTotalLiquidStakedRequest) (*QueryTotalLiquidStakedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalLiquidStaked not implemented")
}
func (*UnimplementedQueryServer) ValidatorLiquidStaked(ctx context.Context, req *QueryValidatorLiquidStakedRequest) (*QueryValidatorLiquidStakedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorLiquidStaked not implemented")
}
func (*UnimplementedQueryServer) TokenizationRecordsByDenom(ctx context.Context, req *QueryTokenizationRecordsByDenomRequest) (*QueryTokenizationRecordsByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizationRecordsByDenom not implemented")
}
func (*UnimplementedQueryServer) RateLimitStatus(ctx context.Context, req *QueryRateLimitStatusRequest) (*QueryRateLimitStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateLimitStatus not implemented")
}
func (*UnimplementedQueryServer) TokenizationStatistics(ctx context.Context, req *QueryTokenizationStatisticsRequest) (*QueryTokenizationStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizationStatistics not implemented")
}
func (*UnimplementedQueryServer) ValidatorStatistics(ctx context.Context, req *QueryValidatorStatisticsRequest) (*QueryValidatorStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorStatistics not implemented")
}
func (*UnimplementedQueryServer) ExchangeRate(ctx context.Context, req *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRate not implemented")
}
func (*UnimplementedQueryServer) AllExchangeRates(ctx context.Context, req *QueryAllExchangeRatesRequest) (*QueryAllExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllExchangeRates not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizationRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/TokenizationRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizationRecord(ctx, req.(*QueryTokenizationRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizationRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizationRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizationRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/TokenizationRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizationRecords(ctx, req.(*QueryTokenizationRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizationRecordsByValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizationRecordsByValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizationRecordsByValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/TokenizationRecordsByValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizationRecordsByValidator(ctx, req.(*QueryTokenizationRecordsByValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizationRecordsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizationRecordsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizationRecordsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/TokenizationRecordsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizationRecordsByOwner(ctx, req.(*QueryTokenizationRecordsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalLiquidStaked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalLiquidStakedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalLiquidStaked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/TotalLiquidStaked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalLiquidStaked(ctx, req.(*QueryTotalLiquidStakedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorLiquidStaked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorLiquidStakedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorLiquidStaked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/ValidatorLiquidStaked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorLiquidStaked(ctx, req.(*QueryValidatorLiquidStakedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizationRecordsByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizationRecordsByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizationRecordsByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/TokenizationRecordsByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizationRecordsByDenom(ctx, req.(*QueryTokenizationRecordsByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RateLimitStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRateLimitStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RateLimitStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/RateLimitStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RateLimitStatus(ctx, req.(*QueryRateLimitStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizationStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizationStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizationStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/TokenizationStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizationStatistics(ctx, req.(*QueryTokenizationStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/ValidatorStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorStatistics(ctx, req.(*QueryValidatorStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/ExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeRate(ctx, req.(*QueryExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Query/AllExchangeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllExchangeRates(ctx, req.(*QueryAllExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flora.liquidstaking.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TokenizationRecord",
			Handler:    _Query_TokenizationRecord_Handler,
		},
		{
			MethodName: "TokenizationRecords",
			Handler:    _Query_TokenizationRecords_Handler,
		},
		{
			MethodName: "TokenizationRecordsByValidator",
			Handler:    _Query_TokenizationRecordsByValidator_Handler,
		},
		{
			MethodName: "TokenizationRecordsByOwner",
			Handler:    _Query_TokenizationRecordsByOwner_Handler,
		},
		{
			MethodName: "TotalLiquidStaked",
			Handler:    _Query_TotalLiquidStaked_Handler,
		},
		{
			MethodName: "ValidatorLiquidStaked",
			Handler:    _Query_ValidatorLiquidStaked_Handler,
		},
		{
			MethodName: "TokenizationRecordsByDenom",
			Handler:    _Query_TokenizationRecordsByDenom_Handler,
		},
		{
			MethodName: "RateLimitStatus",
			Handler:    _Query_RateLimitStatus_Handler,
		},
		{
			MethodName: "TokenizationStatistics",
			Handler:    _Query_TokenizationStatistics_Handler,
		},
		{
			MethodName: "ValidatorStatistics",
			Handler:    _Query_ValidatorStatistics_Handler,
		},
		{
			MethodName: "ExchangeRate",
			Handler:    _Query_ExchangeRate_Handler,
		},
		{
			MethodName: "AllExchangeRates",
			Handler:    _Query_AllExchangeRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flora/liquidstaking/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenizationRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizationRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizationRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizationRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizationRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizationRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenizationRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizationRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizationRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizationRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizationRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizationRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizationRecordsByValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizationRecordsByValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizationRecordsByValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizationRecordsByValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizationRecordsByValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizationRecordsByValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizationRecordsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizationRecordsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizationRecordsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizationRecordsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizationRecordsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizationRecordsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalLiquidStakedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLiquidStakedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLiquidStakedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalLiquidStakedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLiquidStakedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLiquidStakedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalLiquidStaked.Size()
		i -= size
		if _, err := m.TotalLiquidStaked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryValidatorLiquidStakedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorLiquidStakedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorLiquidStakedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorLiquidStakedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorLiquidStakedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorLiquidStakedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LiquidStaked.Size()
		i -= size
		if _, err := m.LiquidStaked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenizationRecordsByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizationRecordsByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizationRecordsByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizationRecordsByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizationRecordsByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizationRecordsByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimitStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimitStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimitStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RateLimitInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimitInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimitInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n11, err11 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.WindowEnd, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.WindowEnd):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintQuery(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x3a
	n12, err12 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.WindowStart, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.WindowStart):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintQuery(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x32
	if m.MaxCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxCount))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentCount))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.MaxAmount.Size()
		i -= size
		if _, err := m.MaxAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CurrentAmount.Size()
		i -= size
		if _, err := m.CurrentAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.LimitType) > 0 {
		i -= len(m.LimitType)
		copy(dAtA[i:], m.LimitType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LimitType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRateLimitStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRateLimitStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRateLimitStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RateLimits) > 0 {
		for iNdEx := len(m.RateLimits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateLimits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizationStatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizationStatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizationStatisticsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTokenizationStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizationStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizationStatisticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalDenomsCreated != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDenomsCreated))
		i--
		dAtA[i] = 0x38
	}
	if m.ValidatorsWithLiquidStake != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValidatorsWithLiquidStake))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.AverageRecordSize.Size()
		i -= size
		if _, err := m.AverageRecordSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ActiveRecords != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ActiveRecords))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalRecords != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalRecords))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.ActiveLiquidStaked.Size()
		i -= size
		if _, err := m.ActiveLiquidStaked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalTokenized.Size()
		i -= size
		if _, err := m.TotalTokenized.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryValidatorStatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorStatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorStatisticsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorStatisticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateLimitUsage != nil {
		{
			size, err := m.RateLimitUsage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TotalRecordsCreated != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalRecordsCreated))
		i--
		dAtA[i] = 0x28
	}
	if m.ActiveRecords != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ActiveRecords))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.LiquidStakingPercentage.Size()
		i -= size
		if _, err := m.LiquidStakingPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalLiquidStaked.Size()
		i -= size
		if _, err := m.TotalLiquidStaked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NativeAmount.Size()
		i -= size
		if _, err := m.NativeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.LstDenom) > 0 {
		i -= len(m.LstDenom)
		copy(dAtA[i:], m.LstDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LstDenom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ExchangeRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExchangeRatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExchangeRatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExchangeRatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExchangeRatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExchangeRatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExchangeRatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GlobalExchangeRate != nil {
		{
			size, err := m.GlobalExchangeRate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExchangeRates) > 0 {
		for iNdEx := len(m.ExchangeRates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExchangeRates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenizationRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryTokenizationRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Record.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenizationRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizationRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizationRecordsByValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizationRecordsByValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizationRecordsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizationRecordsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalLiquidStakedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalLiquidStakedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalLiquidStaked.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryValidatorLiquidStakedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorLiquidStakedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiquidStaked.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenizationRecordsByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizationRecordsByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRateLimitStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RateLimitInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LimitType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.CurrentAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MaxAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.CurrentCount != 0 {
		n += 1 + sovQuery(uint64(m.CurrentCount))
	}
	if m.MaxCount != 0 {
		n += 1 + sovQuery(uint64(m.MaxCount))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.WindowStart)
	n += 1 + l + sovQuery(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.WindowEnd)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRateLimitStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RateLimits) > 0 {
		for _, e := range m.RateLimits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTokenizationStatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTokenizationStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalTokenized.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ActiveLiquidStaked.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.TotalRecords != 0 {
		n += 1 + sovQuery(uint64(m.TotalRecords))
	}
	if m.ActiveRecords != 0 {
		n += 1 + sovQuery(uint64(m.ActiveRecords))
	}
	l = m.AverageRecordSize.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.ValidatorsWithLiquidStake != 0 {
		n += 1 + sovQuery(uint64(m.ValidatorsWithLiquidStake))
	}
	if m.TotalDenomsCreated != 0 {
		n += 1 + sovQuery(uint64(m.TotalDenomsCreated))
	}
	return n
}

func (m *QueryValidatorStatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.TotalLiquidStaked.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LiquidStakingPercentage.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.ActiveRecords != 0 {
		n += 1 + sovQuery(uint64(m.ActiveRecords))
	}
	if m.TotalRecordsCreated != 0 {
		n += 1 + sovQuery(uint64(m.TotalRecordsCreated))
	}
	if m.RateLimitUsage != nil {
		l = m.RateLimitUsage.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExchangeRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExchangeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.LstDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.NativeAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExchangeRatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExchangeRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExchangeRates) > 0 {
		for _, e := range m.ExchangeRates {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.GlobalExchangeRate != nil {
		l = m.GlobalExchangeRate.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizationRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizationRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizationRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizationRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizationRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizationRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizationRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizationRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizationRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizationRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizationRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizationRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, TokenizationRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizationRecordsByValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizationRecordsByValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizationRecordsByValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizationRecordsByValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizationRecordsByValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizationRecordsByValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, TokenizationRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizationRecordsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizationRecordsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizationRecordsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizationRecordsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizationRecordsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizationRecordsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, TokenizationRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLiquidStakedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLiquidStakedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLiquidStakedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLiquidStakedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLiquidStakedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLiquidStakedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidStaked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLiquidStaked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorLiquidStakedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorLiquidStakedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorLiquidStakedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorLiquidStakedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorLiquidStakedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorLiquidStakedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidStaked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidStaked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizationRecordsByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizationRecordsByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizationRecordsByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizationRecordsByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizationRecordsByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizationRecordsByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, TokenizationRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimitStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimitStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimitStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateLimitInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCount", wireType)
			}
			m.CurrentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCount", wireType)
			}
			m.MaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.WindowStart, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.WindowEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRateLimitStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRateLimitStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRateLimitStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimits = append(m.RateLimits, RateLimitInfo{})
			if err := m.RateLimits[len(m.RateLimits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizationStatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizationStatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizationStatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizationStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizationStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizationStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTokenized", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTokenized.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveLiquidStaked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActiveLiquidStaked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRecords", wireType)
			}
			m.TotalRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRecords |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveRecords", wireType)
			}
			m.ActiveRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveRecords |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageRecordSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AverageRecordSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsWithLiquidStake", wireType)
			}
			m.ValidatorsWithLiquidStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorsWithLiquidStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDenomsCreated", wireType)
			}
			m.TotalDenomsCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDenomsCreated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorStatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorStatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorStatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidStaked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLiquidStaked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidStakingPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidStakingPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveRecords", wireType)
			}
			m.ActiveRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveRecords |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRecordsCreated", wireType)
			}
			m.TotalRecordsCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRecordsCreated |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateLimitUsage == nil {
				m.RateLimitUsage = &RateLimitInfo{}
			}
			if err := m.RateLimitUsage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LstDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LstDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NativeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExchangeRatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExchangeRatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExchangeRatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExchangeRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExchangeRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExchangeRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRates = append(m.ExchangeRates, ExchangeRate{})
			if err := m.ExchangeRates[len(m.ExchangeRates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalExchangeRate == nil {
				m.GlobalExchangeRate = &GlobalExchangeRate{}
			}
			if err := m.GlobalExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
