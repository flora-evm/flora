// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flora/liquidstaking/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgTokenizeShares defines a message for converting delegation shares into liquid staking tokens
type MsgTokenizeShares struct {
	// delegator_address is the address of the delegator
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// validator_address is the address of the validator
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// shares is the amount of delegation shares to tokenize
	Shares types.Coin `protobuf:"bytes,3,opt,name=shares,proto3" json:"shares"`
	// owner_address is the address that will receive the liquid staking tokens
	// if empty, defaults to delegator_address
	OwnerAddress string `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
}

func (m *MsgTokenizeShares) Reset()         { *m = MsgTokenizeShares{} }
func (m *MsgTokenizeShares) String() string { return proto.CompactTextString(m) }
func (*MsgTokenizeShares) ProtoMessage()    {}
func (*MsgTokenizeShares) Descriptor() ([]byte, []int) {
	return fileDescriptor_c675f501b61e0293, []int{0}
}
func (m *MsgTokenizeShares) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenizeShares) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenizeShares.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenizeShares) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenizeShares.Merge(m, src)
}
func (m *MsgTokenizeShares) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenizeShares) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenizeShares.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenizeShares proto.InternalMessageInfo

// MsgTokenizeSharesResponse defines the response for MsgTokenizeShares
type MsgTokenizeSharesResponse struct {
	// denom is the denom of the newly minted liquid staking token
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// amount is the amount of liquid staking tokens minted
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	// record_id is the ID of the tokenization record created
	RecordId uint64 `protobuf:"varint,3,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
}

func (m *MsgTokenizeSharesResponse) Reset()         { *m = MsgTokenizeSharesResponse{} }
func (m *MsgTokenizeSharesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTokenizeSharesResponse) ProtoMessage()    {}
func (*MsgTokenizeSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c675f501b61e0293, []int{1}
}
func (m *MsgTokenizeSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenizeSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenizeSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenizeSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenizeSharesResponse.Merge(m, src)
}
func (m *MsgTokenizeSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenizeSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenizeSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenizeSharesResponse proto.InternalMessageInfo

func (m *MsgTokenizeSharesResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgTokenizeSharesResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgTokenizeSharesResponse) GetRecordId() uint64 {
	if m != nil {
		return m.RecordId
	}
	return 0
}

// MsgRedeemTokens defines a message for redeeming liquid staking tokens back to native staking
type MsgRedeemTokens struct {
	// owner_address is the address that owns the liquid staking tokens
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// amount is the amount of liquid staking tokens to redeem
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgRedeemTokens) Reset()         { *m = MsgRedeemTokens{} }
func (m *MsgRedeemTokens) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemTokens) ProtoMessage()    {}
func (*MsgRedeemTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_c675f501b61e0293, []int{2}
}
func (m *MsgRedeemTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemTokens.Merge(m, src)
}
func (m *MsgRedeemTokens) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemTokens.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemTokens proto.InternalMessageInfo

// MsgRedeemTokensResponse defines the response for MsgRedeemTokens
type MsgRedeemTokensResponse struct {
	// shares is the amount of delegation shares restored
	Shares cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
	// record_id is the ID of the tokenization record that was updated/deleted
	RecordId uint64 `protobuf:"varint,2,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
}

func (m *MsgRedeemTokensResponse) Reset()         { *m = MsgRedeemTokensResponse{} }
func (m *MsgRedeemTokensResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemTokensResponse) ProtoMessage()    {}
func (*MsgRedeemTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c675f501b61e0293, []int{3}
}
func (m *MsgRedeemTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemTokensResponse.Merge(m, src)
}
func (m *MsgRedeemTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemTokensResponse proto.InternalMessageInfo

func (m *MsgRedeemTokensResponse) GetRecordId() uint64 {
	if m != nil {
		return m.RecordId
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgTokenizeShares)(nil), "flora.liquidstaking.v1.MsgTokenizeShares")
	proto.RegisterType((*MsgTokenizeSharesResponse)(nil), "flora.liquidstaking.v1.MsgTokenizeSharesResponse")
	proto.RegisterType((*MsgRedeemTokens)(nil), "flora.liquidstaking.v1.MsgRedeemTokens")
	proto.RegisterType((*MsgRedeemTokensResponse)(nil), "flora.liquidstaking.v1.MsgRedeemTokensResponse")
}

func init() { proto.RegisterFile("flora/liquidstaking/v1/tx.proto", fileDescriptor_c675f501b61e0293) }

var fileDescriptor_c675f501b61e0293 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xe3, 0xae, 0x9b, 0x98, 0x19, 0x7f, 0x1a, 0x55, 0xac, 0xed, 0x44, 0x32, 0xf5, 0xc2,
	0xa8, 0xb4, 0x58, 0x19, 0x07, 0xa4, 0x09, 0x0e, 0x94, 0x71, 0x98, 0xa0, 0x97, 0x8c, 0x13, 0x97,
	0xca, 0x4d, 0x4c, 0x6a, 0x35, 0xb1, 0x4b, 0x9c, 0x96, 0x8d, 0x13, 0x70, 0x01, 0x71, 0xe2, 0x23,
	0xec, 0x23, 0xf4, 0xb0, 0xef, 0xc0, 0x8e, 0xd3, 0x4e, 0x08, 0x89, 0x09, 0xb5, 0x12, 0xe5, 0x63,
	0xa0, 0xc4, 0x59, 0x68, 0xda, 0x89, 0x15, 0x2e, 0x55, 0xfd, 0xbe, 0x8f, 0xdf, 0xf7, 0x79, 0x7f,
	0xb1, 0x0d, 0xf5, 0x97, 0x1e, 0x0f, 0x30, 0xf2, 0xe8, 0xab, 0x1e, 0x75, 0x44, 0x88, 0x3b, 0x94,
	0xb9, 0xa8, 0x6f, 0xa2, 0x70, 0xdf, 0xe8, 0x06, 0x3c, 0xe4, 0xea, 0xad, 0x58, 0x60, 0x64, 0x04,
	0x46, 0xdf, 0xac, 0x14, 0x5d, 0xee, 0xf2, 0x58, 0x82, 0xa2, 0x7f, 0x52, 0x5d, 0x29, 0xdb, 0x5c,
	0xf8, 0x5c, 0x34, 0x65, 0x42, 0x2e, 0x92, 0x94, 0x26, 0x57, 0xa8, 0x85, 0x05, 0x41, 0x7d, 0xb3,
	0x45, 0x42, 0x6c, 0x22, 0x9b, 0x53, 0x96, 0xe4, 0x57, 0x93, 0xbc, 0x2f, 0x62, 0x03, 0xbe, 0x70,
	0x93, 0x44, 0x01, 0xfb, 0x94, 0x71, 0x14, 0xff, 0xca, 0x50, 0xf5, 0x7b, 0x0e, 0x16, 0x1a, 0xc2,
	0x7d, 0xce, 0x3b, 0x84, 0xd1, 0x37, 0x64, 0xaf, 0x8d, 0x03, 0x22, 0xd4, 0x27, 0xb0, 0xe0, 0x10,
	0x8f, 0xb8, 0x38, 0xe4, 0x41, 0x13, 0x3b, 0x4e, 0x40, 0x84, 0x28, 0x81, 0x75, 0xb0, 0xb1, 0x5c,
	0x2f, 0x9d, 0x1e, 0x6d, 0x16, 0x13, 0x3b, 0x8f, 0x64, 0x66, 0x2f, 0x0c, 0x28, 0x73, 0xad, 0x9b,
	0xe9, 0x96, 0x24, 0x1e, 0x95, 0xe9, 0x63, 0x8f, 0x3a, 0x99, 0x32, 0xb9, 0xcb, 0xca, 0xa4, 0x5b,
	0xce, 0xcb, 0xdc, 0x87, 0x4b, 0x22, 0xf6, 0x55, 0x5a, 0x58, 0x07, 0x1b, 0x57, 0xb7, 0xca, 0x46,
	0xb2, 0x31, 0x02, 0x60, 0x24, 0x00, 0x8c, 0xc7, 0x9c, 0xb2, 0x7a, 0xfe, 0xf8, 0x4c, 0x57, 0xac,
	0x44, 0xae, 0x3e, 0x84, 0xd7, 0xf8, 0x6b, 0x46, 0xfe, 0xf4, 0xce, 0x5f, 0xd2, 0x7b, 0x25, 0x96,
	0x27, 0xb1, 0xed, 0xfa, 0xc7, 0x43, 0x5d, 0xf9, 0x75, 0xa8, 0x2b, 0xef, 0xc7, 0x83, 0xda, 0x2c,
	0x90, 0x4f, 0xe3, 0x41, 0x4d, 0xcf, 0x7e, 0xee, 0x19, 0x92, 0xd5, 0x0f, 0x00, 0x96, 0x67, 0xa2,
	0x16, 0x11, 0x5d, 0xce, 0x04, 0x51, 0x8b, 0x70, 0xd1, 0x21, 0x8c, 0xfb, 0x92, 0xad, 0x25, 0x17,
	0xd1, 0xbc, 0xd8, 0xe7, 0x3d, 0x16, 0xc6, 0xac, 0xe6, 0x99, 0x57, 0xca, 0xd5, 0x35, 0xb8, 0x1c,
	0x10, 0x9b, 0x07, 0x4e, 0x93, 0x3a, 0x31, 0xab, 0xbc, 0x75, 0x45, 0x06, 0x76, 0x9d, 0xea, 0x17,
	0x00, 0x6f, 0x34, 0x84, 0x6b, 0x11, 0x87, 0x10, 0x3f, 0xf6, 0x73, 0x01, 0x20, 0xf0, 0x2f, 0x80,
	0xfe, 0xdb, 0xe8, 0xf6, 0x83, 0x49, 0xb2, 0x59, 0x0b, 0x11, 0xd5, 0xdb, 0x33, 0x54, 0x27, 0x5d,
	0x57, 0xdf, 0x01, 0xb8, 0x3a, 0x15, 0x4b, 0x89, 0xee, 0xa6, 0x67, 0x45, 0x8e, 0x62, 0x46, 0x7d,
	0xbf, 0x9d, 0xe9, 0x6b, 0xd2, 0x99, 0x70, 0x3a, 0x06, 0xe5, 0xc8, 0xc7, 0x61, 0xdb, 0x78, 0x46,
	0x5c, 0x6c, 0x1f, 0xec, 0x10, 0xfb, 0xf4, 0x68, 0x13, 0x26, 0xc6, 0x77, 0x88, 0x9d, 0x9e, 0x9e,
	0x0c, 0xcd, 0x5c, 0x96, 0xe6, 0xd6, 0x4f, 0x00, 0x17, 0x1a, 0xc2, 0x55, 0x19, 0xbc, 0x3e, 0x75,
	0x77, 0xee, 0x1a, 0x17, 0xdf, 0x73, 0x63, 0xe6, 0x18, 0x54, 0xcc, 0xb9, 0xa5, 0xe9, 0x7c, 0x6d,
	0xb8, 0x92, 0xf9, 0x82, 0x77, 0xfe, 0x52, 0x62, 0x52, 0x58, 0x41, 0x73, 0x0a, 0xcf, 0x3b, 0x55,
	0x16, 0xdf, 0x8e, 0x07, 0x35, 0x50, 0x7f, 0x7a, 0x3c, 0xd4, 0xc0, 0xc9, 0x50, 0x03, 0x3f, 0x86,
	0x1a, 0xf8, 0x3c, 0xd2, 0x94, 0x93, 0x91, 0xa6, 0x7c, 0x1d, 0x69, 0xca, 0x0b, 0xd3, 0xa5, 0x61,
	0xbb, 0xd7, 0x32, 0x6c, 0xee, 0xa3, 0x80, 0x7b, 0x9e, 0xdd, 0xc6, 0x94, 0x09, 0x24, 0x9f, 0xc1,
	0xfd, 0xa9, 0x87, 0x30, 0x3c, 0xe8, 0x12, 0xd1, 0x5a, 0x8a, 0x1f, 0x9d, 0x7b, 0xbf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x6d, 0x82, 0x2d, 0xea, 0x2c, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// TokenizeShares converts delegation shares into liquid staking tokens
	TokenizeShares(ctx context.Context, in *MsgTokenizeShares, opts ...grpc.CallOption) (*MsgTokenizeSharesResponse, error)
	// RedeemTokens converts liquid staking tokens back to delegation shares
	RedeemTokens(ctx context.Context, in *MsgRedeemTokens, opts ...grpc.CallOption) (*MsgRedeemTokensResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) TokenizeShares(ctx context.Context, in *MsgTokenizeShares, opts ...grpc.CallOption) (*MsgTokenizeSharesResponse, error) {
	out := new(MsgTokenizeSharesResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Msg/TokenizeShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RedeemTokens(ctx context.Context, in *MsgRedeemTokens, opts ...grpc.CallOption) (*MsgRedeemTokensResponse, error) {
	out := new(MsgRedeemTokensResponse)
	err := c.cc.Invoke(ctx, "/flora.liquidstaking.v1.Msg/RedeemTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// TokenizeShares converts delegation shares into liquid staking tokens
	TokenizeShares(context.Context, *MsgTokenizeShares) (*MsgTokenizeSharesResponse, error)
	// RedeemTokens converts liquid staking tokens back to delegation shares
	RedeemTokens(context.Context, *MsgRedeemTokens) (*MsgRedeemTokensResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) TokenizeShares(ctx context.Context, req *MsgTokenizeShares) (*MsgTokenizeSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizeShares not implemented")
}
func (*UnimplementedMsgServer) RedeemTokens(ctx context.Context, req *MsgRedeemTokens) (*MsgRedeemTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemTokens not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_TokenizeShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTokenizeShares)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TokenizeShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Msg/TokenizeShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TokenizeShares(ctx, req.(*MsgTokenizeShares))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RedeemTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRedeemTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RedeemTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flora.liquidstaking.v1.Msg/RedeemTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RedeemTokens(ctx, req.(*MsgRedeemTokens))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flora.liquidstaking.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenizeShares",
			Handler:    _Msg_TokenizeShares_Handler,
		},
		{
			MethodName: "RedeemTokens",
			Handler:    _Msg_RedeemTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flora/liquidstaking/v1/tx.proto",
}

func (m *MsgTokenizeShares) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenizeShares) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenizeShares) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Shares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTokenizeSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenizeSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenizeSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RecordId))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedeemTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedeemTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RecordId))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgTokenizeShares) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTokenizeSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.RecordId != 0 {
		n += 1 + sovTx(uint64(m.RecordId))
	}
	return n
}

func (m *MsgRedeemTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRedeemTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shares.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.RecordId != 0 {
		n += 1 + sovTx(uint64(m.RecordId))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgTokenizeShares) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenizeShares: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenizeShares: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenizeSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenizeSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenizeSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordId", wireType)
			}
			m.RecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordId", wireType)
			}
			m.RecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
