// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flora/liquidstaking/v1/types.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TokenizationRecord represents a record of staked tokens that have been tokenized
type TokenizationRecord struct {
	// id is the unique identifier for this record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// validator is the bech32 address of the validator
	Validator string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	// owner is the bech32 address of the record owner
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// shares_tokenized is the amount of shares tokenized
	SharesTokenized cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=shares_tokenized,json=sharesTokenized,proto3,customtype=cosmossdk.io/math.Int" json:"shares_tokenized"`
}

func (m *TokenizationRecord) Reset()         { *m = TokenizationRecord{} }
func (m *TokenizationRecord) String() string { return proto.CompactTextString(m) }
func (*TokenizationRecord) ProtoMessage()    {}
func (*TokenizationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e6bd230c41714ec, []int{0}
}
func (m *TokenizationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenizationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenizationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenizationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenizationRecord.Merge(m, src)
}
func (m *TokenizationRecord) XXX_Size() int {
	return m.Size()
}
func (m *TokenizationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenizationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TokenizationRecord proto.InternalMessageInfo

// ModuleParams defines the parameters for the liquid staking module
type ModuleParams struct {
	// global_liquid_staking_cap is the global cap for liquid staking as a percentage
	GlobalLiquidStakingCap cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=global_liquid_staking_cap,json=globalLiquidStakingCap,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"global_liquid_staking_cap"`
	// validator_liquid_cap is the per-validator cap for liquid staking as a percentage
	ValidatorLiquidCap cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=validator_liquid_cap,json=validatorLiquidCap,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"validator_liquid_cap"`
	// enabled indicates if the liquid staking module is enabled
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *ModuleParams) Reset()         { *m = ModuleParams{} }
func (m *ModuleParams) String() string { return proto.CompactTextString(m) }
func (*ModuleParams) ProtoMessage()    {}
func (*ModuleParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e6bd230c41714ec, []int{1}
}
func (m *ModuleParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleParams.Merge(m, src)
}
func (m *ModuleParams) XXX_Size() int {
	return m.Size()
}
func (m *ModuleParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleParams.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleParams proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TokenizationRecord)(nil), "flora.liquidstaking.v1.TokenizationRecord")
	proto.RegisterType((*ModuleParams)(nil), "flora.liquidstaking.v1.ModuleParams")
}

func init() {
	proto.RegisterFile("flora/liquidstaking/v1/types.proto", fileDescriptor_1e6bd230c41714ec)
}

var fileDescriptor_1e6bd230c41714ec = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x6d, 0x13, 0x7e, 0x32, 0x42, 0x80, 0xac, 0x50, 0xb9, 0x45, 0x72, 0xaa, 0xac, 0x2a,
	0xa1, 0x7a, 0x64, 0x21, 0xb1, 0x60, 0x47, 0xe8, 0xa6, 0xa2, 0x48, 0xc8, 0xad, 0x58, 0xb0, 0xb1,
	0xae, 0x67, 0x06, 0x67, 0x94, 0xc9, 0xdc, 0x30, 0x33, 0x09, 0x94, 0x1d, 0x3b, 0x96, 0x3c, 0x02,
	0x0f, 0xd1, 0x87, 0xe8, 0xb2, 0xea, 0x0a, 0xb1, 0xa8, 0x50, 0xb2, 0xe3, 0x29, 0x50, 0x3c, 0x4e,
	0xf9, 0x5b, 0x20, 0x75, 0xe7, 0xab, 0x7b, 0xee, 0xf9, 0x3c, 0x47, 0x87, 0x0c, 0xde, 0x28, 0x34,
	0x40, 0x95, 0x7c, 0x3b, 0x93, 0xdc, 0x3a, 0x18, 0x4b, 0x5d, 0xd3, 0x79, 0x4e, 0xdd, 0xf1, 0x54,
	0xd8, 0x6c, 0x6a, 0xd0, 0x61, 0xbc, 0xd1, 0x68, 0xb2, 0x3f, 0x34, 0xd9, 0x3c, 0xdf, 0xea, 0xd5,
	0x58, 0x63, 0x23, 0xa1, 0xab, 0x2f, 0xaf, 0xde, 0xda, 0x64, 0x68, 0x27, 0x68, 0x4b, 0xbf, 0xf0,
	0x43, 0xbb, 0x4a, 0xfd, 0x44, 0x2b, 0xb0, 0x82, 0xce, 0xf3, 0x4a, 0x38, 0xc8, 0x29, 0x43, 0xa9,
	0xfd, 0x7e, 0xf0, 0x23, 0x24, 0xf1, 0x11, 0x8e, 0x85, 0x96, 0x1f, 0xc0, 0x49, 0xd4, 0x85, 0x60,
	0x68, 0x78, 0x7c, 0x87, 0x44, 0x92, 0x27, 0xe1, 0x76, 0xb8, 0xd3, 0x29, 0x22, 0xc9, 0xe3, 0xc7,
	0xa4, 0x3b, 0x07, 0x25, 0x39, 0x38, 0x34, 0x49, 0xb4, 0x1d, 0xee, 0x74, 0x87, 0xc9, 0xf9, 0xc9,
	0x6e, 0xaf, 0x65, 0x3d, 0xe5, 0xdc, 0x08, 0x6b, 0x0f, 0x9d, 0x91, 0xba, 0x2e, 0x7e, 0x49, 0xe3,
	0x8c, 0x5c, 0xc7, 0x77, 0x5a, 0x98, 0xe4, 0xda, 0x7f, 0x6e, 0xbc, 0x2c, 0x7e, 0x45, 0xee, 0xd9,
	0x11, 0x18, 0x61, 0x4b, 0xe7, 0x7f, 0x4a, 0xf0, 0xa4, 0xd3, 0x9c, 0x3e, 0x3c, 0xbd, 0xe8, 0x07,
	0xdf, 0x2e, 0xfa, 0xf7, 0xfd, 0xb9, 0xe5, 0xe3, 0x4c, 0x22, 0x9d, 0x80, 0x1b, 0x65, 0xfb, 0xda,
	0x9d, 0x9f, 0xec, 0x92, 0xd6, 0x77, 0x5f, 0xbb, 0xe2, 0xae, 0x37, 0x39, 0x5a, 0x7b, 0x3c, 0xe9,
	0x7c, 0xfa, 0xd2, 0x0f, 0x06, 0x1f, 0x23, 0x72, 0xfb, 0x05, 0xf2, 0x99, 0x12, 0x2f, 0xc1, 0xc0,
	0xc4, 0xc6, 0x8a, 0x6c, 0xd6, 0x0a, 0x2b, 0x50, 0xa5, 0x4f, 0xba, 0x6c, 0xa3, 0x2e, 0x19, 0x4c,
	0x9b, 0xd7, 0x77, 0x87, 0x79, 0xcb, 0x7d, 0xf0, 0x2f, 0xf7, 0x40, 0xd4, 0xc0, 0x8e, 0xf7, 0x04,
	0xfb, 0x8d, 0xbe, 0x27, 0x58, 0xb1, 0xe1, 0x3d, 0x0f, 0x1a, 0xcb, 0x43, 0xef, 0xf8, 0x0c, 0xa6,
	0x31, 0x23, 0xbd, 0xcb, 0x64, 0xd6, 0xc0, 0x15, 0x28, 0xba, 0x2a, 0x28, 0xbe, 0xb4, 0xf3, 0xac,
	0x15, 0x24, 0x21, 0x37, 0x85, 0x86, 0x4a, 0x09, 0xde, 0x64, 0x7e, 0xab, 0x58, 0x8f, 0x3e, 0x83,
	0xe1, 0xf3, 0xd3, 0x45, 0x1a, 0x9e, 0x2d, 0xd2, 0xf0, 0xfb, 0x22, 0x0d, 0x3f, 0x2f, 0xd3, 0xe0,
	0x6c, 0x99, 0x06, 0x5f, 0x97, 0x69, 0xf0, 0x3a, 0xaf, 0xa5, 0x1b, 0xcd, 0xaa, 0x8c, 0xe1, 0x84,
	0x1a, 0x54, 0x8a, 0x8d, 0x40, 0x6a, 0x4b, 0x7d, 0x5b, 0xdf, 0xff, 0xd5, 0xd7, 0xa6, 0xac, 0xd5,
	0x8d, 0xa6, 0x44, 0x8f, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xe9, 0x68, 0x09, 0xd3, 0x02,
	0x00, 0x00,
}

func (m *TokenizationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenizationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenizationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharesTokenized.Size()
		i -= size
		if _, err := m.SharesTokenized.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModuleParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.ValidatorLiquidCap.Size()
		i -= size
		if _, err := m.ValidatorLiquidCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.GlobalLiquidStakingCap.Size()
		i -= size
		if _, err := m.GlobalLiquidStakingCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenizationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.SharesTokenized.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *ModuleParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GlobalLiquidStakingCap.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.ValidatorLiquidCap.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.Enabled {
		n += 2
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenizationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenizationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenizationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesTokenized", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesTokenized.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalLiquidStakingCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GlobalLiquidStakingCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorLiquidCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorLiquidCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
